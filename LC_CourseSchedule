/*
There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

*/
public class Solution {
    public boolean canFinish(int n, int[][] pre) {
        Map<Integer,Set<Integer>> g = new HashMap<Integer,Set<Integer>>();
        for(int i=0;i<pre.length;i++){
            if(!g.containsKey(pre[i][0])){
                g.put(pre[i][0],new HashSet<Integer>());
            }
            g.get(pre[i][0]).add(pre[i][1]);
        }
        Set<Integer>visited= new HashSet<Integer>();
        Set<Integer> thisline = new HashSet<Integer>();
        for(int i=0;i<n;i++){
            visited.add(i);
            if(!dfs(g,visited,thisline,i)){
                return false;
            }
        }
        return true;
    }
    public boolean dfs(Map<Integer,Set<Integer>>g,Set<Integer>visited,Set<Integer>thisline,int n){
        if(!g.containsKey(n)) return true;
        thisline.add(n);
        Set<Integer> neighbor = g.get(n);
        for(Integer next : neighbor){
            if(thisline.contains(next)){
                return false;
            }
            if(!visited.contains(next)){
                visited.add(next);
                if(!dfs(g,visited,thisline,next)){
                    return false;
                }
            }
        }
        thisline.remove(n);
        return true;
    }
}
