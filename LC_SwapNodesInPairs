/*
  Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head ==null||head.next==null) return head;
        ListNode odd = new ListNode(0);
        ListNode even = new ListNode(1);
        ListNode node = head,n1=odd,n2=even;
        while(node!=null){
            n1.next=node;
            n1=n1.next;
            node=node.next;
            if(node==null) break;
            n2.next=node;
            node=node.next;
            n2=n2.next;
        }
        n1.next=null;
        n2.next=null;
        n1=odd.next;n2=even.next;
        node=even;
        while(n2!=null){
            node.next=n2;
            n2=n2.next;
            node=node.next;
            node.next=n1;
            n1=n1.next;
            node=node.next;
        }
        return even.next;
    }
}
