
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        longest = [0]
        self.diameter(root, longest)
        return 0 if longest[0] == 0 else longest[0] - 1
    
    def diameter(self, root, longest):
        if root is None:
            return 0
        left, right = self.diameter(root.left, longest), self.diameter(root.right, longest)
        if left + right + 1 > longest[0]:
            longest[0] = left + right + 1
        return max(left, right) + 1
        
