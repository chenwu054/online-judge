/*
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
*/
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
  public RandomListNode copyRandomList(RandomListNode head) {
      if(head==null) return null;
      RandomListNode node = head;
      while(node!=null){
          RandomListNode newNode = new RandomListNode(node.label);
          newNode.next=node.next;
          node.next=newNode;
          node=newNode.next;
      }
      node=head;
      while(node!=null){
          if(node.random!=null)
              node.next.random = node.random.next;
          node=node.next.next;
      }
      node=head;
      RandomListNode retHead=node.next;
      RandomListNode nextNode=node.next;
      while(node!=null){
          nextNode=node.next;
          if(nextNode==null) break;
          node.next=nextNode.next;
          node=nextNode;
      }
      return retHead;
  }
}
