public class Solution {
    public int minDistance(String word1, String word2) {
        if(word1 == null || word2 == null) {
            return 0;
        }
        int n = word1.length(), m = word2.length();
        int[][] dp = new int[n + 1][m + 1];
        for(int i = 0; i < word1.length(); i++) {
            dp[i + 1][0] = i + 1;
        }
        for(int j = 0; j < word2.length(); j++) {
            dp[0][j + 1] = j + 1;
        }
        for(int i = 0; i < word1.length(); i++) {
            for(int j = 0; j < word2.length(); j++) {
                dp[i + 1][j + 1] = (word1.charAt(i) == word2.charAt(j) ? 0 : 1) + dp[i][j];
                dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], Math.min(dp[i + 1][j] + 1, dp[i][j + 1] + 1));
            }
        }
        return dp[n][m];
    }
}

/*
  Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/
/*
  O(m) space.
*/
public int minDistance(String word1, String word2) {
        if(word1==null||word2==null) return -1;
        int n=word1.length(),m=word2.length();
        int[][] dp = new int[2][m+1];
        for(int i=1;i<=m;i++)
            dp[0][i]=i;
        for(int i=1;i<=n;i++){
            int cur = i%2;
            dp[cur][0]=i;
            for(int j=1;j<=m;j++){
                int min = Math.min(dp[1-cur][j],dp[cur][j-1]);
                dp[cur][j]=Math.min(dp[1-cur][j-1]+(word1.charAt(i-1)==word2.charAt(j-1)?0:1),min+1);
            }
        }
        return dp[n%2][m];
}
    
public class Solution {
    public int minDistance(String word1, String word2) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(word1==null&&word2==null)
            return 0;
        if(word1==null||word2==null)
            return word1==null?word2.length():word1.length();
        int n=word1.length(),m=word2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=0;i<n;i++){
            dp[i+1][0]=i+1;    
        }
        for(int j=0;j<m;j++){
            dp[0][j+1]=j+1;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                dp[i][j]=dp[i-1][j-1]+(word1.charAt(i-1)==word2.charAt(j-1)?0:1);
                dp[i][j]=Math.min(dp[i-1][j]+1,dp[i][j]);
                dp[i][j]=Math.min(dp[i][j-1]+1,dp[i][j]);
            }
        }
        return dp[n][m];
    }
}
