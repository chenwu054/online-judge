/*
  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:
   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}".
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        if(root==null)
            return ret;
        Queue<TreeNode> q= new LinkedList<TreeNode>();
        Queue<TreeNode> next=new LinkedList<TreeNode>();
        Queue<TreeNode> temp=null;
        q.offer(root);
        boolean reverse=false;
        while(q.size()>0){
            ret.add(new ArrayList<Integer>());
            int n = ret.size()-1;
            while(q.size()>0){
                TreeNode cur = q.poll();
                if(cur.left!=null)
                    next.offer(cur.left);
                if(cur.right!=null)
                    next.offer(cur.right);
                ret.get(n).add(cur.val);
            }
            if(reverse){
                Collections.reverse(ret.get(n));
            }
            reverse=!reverse;
            temp =q;
            q=next;
            next=temp;
        }
        return ret;
    }
    
}
