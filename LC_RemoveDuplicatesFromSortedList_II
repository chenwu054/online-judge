/*
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode newHead=new ListNode(0);
        //newHead.next=head;
        ListNode front = head.next,back=head,node=newHead;
        while(front!=null){
            if(front.val!=back.val){
                node.next=back;
                back=back.next;
                front=front.next;
                node=node.next;
            }
            else{
                while(front!=null && front.val==back.val){
                    front=front.next;
                }
                back=front;
                if(front==null) break;
                front=front.next;
            }
        }
        //don't forget to link to the last unique node.
        node.next=back;
        return newHead.next;
    }
}
