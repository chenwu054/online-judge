/*
  Divide two integers without using multiplication, division and mod operator.
*/
public class Solution {
    public int divide(int dividend, int divisor) {
        if(divisor==0) return dividend<0?Integer.MIN_VALUE:Integer.MAX_VALUE;
        int ret=0;
        boolean neg = (dividend<0) ^ (divisor<0);
        dividend = dividend<0?dividend:-dividend;
        divisor = divisor<0?divisor:-divisor;
        //ATTN: the equal sign
        while(dividend<=divisor){
            int i=1;
            while(dividend<=(divisor<<i) && (divisor<<i)<divisor) i++;
            ret |=(1<<(i-1));
            dividend -=divisor<<(i-1);
        }
        return neg?-ret:ret;
    }
}

public class Solution {
	/*
		use bit manipulation
	*/
    public int divide(int dividend, int divisor) {
        // Start typing your Java solution below
        // DO NOT write main() function
        boolean neg= (dividend<0)^(divisor<0);
	dividend=dividend==Integer.MIN_VALUE?Integer.MIN_VALUE:(-1)*Math.abs(dividend);
	divisor=divisor==Integer.MIN_VALUE?Integer.MIN_VALUE:(-1)*Math.abs(divisor);
	if(divisor==dividend)
		return neg?-1:1;
	if(divisor==-1)
		return neg?dividend:Math.abs(dividend);
	int ret=0;
	while(dividend<=divisor){
		int temp=1;
		int div=divisor;
		while(dividend-(div<<1)<divisor){
			temp = temp<<1;
			div =div<<1;
		}
		ret+=temp;
		dividend-=div;
	}
	return neg?(-1)*ret:ret;
    }
}
