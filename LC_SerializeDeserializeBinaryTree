/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        preorderSerialize(root, sb);
        return sb.toString();
    }
    private void preorderSerialize(TreeNode root, StringBuilder sb) {
        if(root == null) {
            sb.append("#");
            return;
        }
        sb.append(root.val).append('#');
        preorderSerialize(root.left, sb);
        preorderSerialize(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        int[] start  = {0};
        return preorderDeserialize(data, start);
    }
    private TreeNode preorderDeserialize(String data, int[] start) {
        int i = start[0];
        while(data.charAt(i)!='#') {
            i++;
        }
        TreeNode root=null;
        if(i != start[0]) {
            Integer val = Integer.parseInt(data.substring(start[0], i));
            root=new TreeNode(val);
        }
        start[0] = i+1;
        if(root!=null) {
            TreeNode left = preorderDeserialize(data, start);
            TreeNode right = preorderDeserialize(data, start);
            root.left = left;
            root.right= right;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
