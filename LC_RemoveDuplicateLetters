public class Solution {
    public String removeDuplicateLetters(String s) {
        if(s == null || s.length() == 0) {
            return s;
        }
        int n = s.length();
        int[] count = new int[26];
        for(int i = 0; i<n;i++) {
            count[s.charAt(i) - 'a'] += 1;
        }
        Stack<Character> k = new Stack<Character>();
        boolean[] has = new boolean[26];
        k.push(s.charAt(0));
        count[s.charAt(0) - 'a'] -= 1;
        has[s.charAt(0) - 'a'] = true;
        for(int i = 1; i < n; i++) {
            char c = s.charAt(i);
            count[c-'a'] -= 1;
            if(!has[c-'a']) {
                while(!k.isEmpty() && k.peek() > c && count[k.peek() - 'a'] > 0) {
                    has[k.pop() - 'a'] = false;
                }
                k.push(c);
                has[c-'a']=true;
            }
        }  
        StringBuilder sb = new StringBuilder();
        while(!k.isEmpty()) {
            sb.append(k.pop());
        }
        return sb.reverse().toString();
    }
}

/*
Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Example:
Given "bcabc"
Return "abc"

Given "cbacdcbc"
Return "acdb"

solution:
First, count each letter number
Then, append the each letter to the result and keep the optimal (smallest) order,
by popping greater tail letters if there are additional others letters later.

*/
public class Solution {
    public String removeDuplicateLetters(String s) {
		if(s == null || s.length() == 0) {
			return s;
		}
		int n = s.length();
		int[] count = new int[26];
		for(int i = 0; i < n; i++) {
			char c = s.charAt(i);
			count[c-'a']++;
		}
		boolean[] hasLetter = new boolean[26];
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < n; i++) {
			char c = s.charAt(i);
			count[c-'a']--; // decrement the count for each letter
			if(sb.length() == 0) {
				sb.append(c);
				hasLetter[c-'a']=true; 
				continue;
			}
			if(!hasLetter[c-'a']) { // must not be in the result, otherwise it is already in the optimal order.
				while(sb.length() > 0 && c < sb.charAt(sb.length() - 1) && count[sb.charAt(sb.length() - 1) - 'a'] > 0) {
				// c must be smaller than the tail letter and there will be additional tail letters later.
					hasLetter[sb.charAt(sb.length() - 1)-'a'] = false;
					sb.deleteCharAt(sb.length() - 1);
				}
				sb.append(c);
				hasLetter[c-'a']=true;
			}		
		}
		return sb.toString();
	}
	
}
