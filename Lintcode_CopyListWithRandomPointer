/*
Medium Copy List with Random Pointer Show result 

27% Accepted
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
*/
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if(head==null){
            return null;
        }
        RandomListNode node = head;
        RandomListNode newNode=null;
        while(node!=null){
            newNode=new RandomListNode(node.label);
            newNode.next=node.next;
            node.next=newNode;
            node=newNode.next;
        }
        node=head;
        newNode=node.next;
        while(node!=null){
            if(node.random!=null){
                newNode.random=node.random.next;
            }
            node=newNode.next;
            if(node!=null){
                newNode=node.next;// check null
            }
        }
        RandomListNode ret = head.next;
        node=head;
        newNode=node.next;
        while(node!=null){
            node.next=newNode.next;
            node=node.next;
            if(node!=null){
                newNode.next=node.next;
                newNode=newNode.next;
            }
        }
        return ret;
    }
}
