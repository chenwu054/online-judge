/*
Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

For example,

    Given numerator = 1, denominator = 2, return "0.5".
    Given numerator = 2, denominator = 1, return "2".
    Given numerator = 2, denominator = 3, return "0.(6)".

*/
public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if(numerator==0){
            return "0";
        }
        if(denominator==0){
            return "";
        }
        StringBuilder sb = new StringBuilder();
        //set sign
        if(numerator<0 ^ denominator<0){
            sb.append('-');
        }
        //convert to long
        long n=numerator;
        long d=denominator;
        n=Math.abs(n);
        d=Math.abs(d);
        //get the decimal
        long r = n/d; 
        sb.append(r); //set decimal
        long q = n%d; // get the remainder
        if(q==0){
            return sb.toString();
        }
        sb.append('.');
        n=q;
        Map<Long,Integer> map=new HashMap<Long,Integer>();
        int i = sb.length()-1;
        while(n>0){
            if(map.containsKey(n)){
                int p = map.get(n);
                sb.insert(p,'(');
                sb.append(')');
                break;
            }
            map.put(n,sb.length()); //set the position
            n=n*10; // increase by order of 10
            sb.append(n/d); //set the quotient 
            n=n%d; // get remainder
        }
        return sb.toString();
    }
}
