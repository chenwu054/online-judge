class Solution:
    """
    @param root: The root of binary tree.
    @return: True if this Binary tree is Balanced, or false.
    """
    def isBalanced(self, root):
        # write your code here
        depth = self.getDepth(root)
        return depth!=-1
    
    def getDepth(self,root):
        if root==None: 
            return 0
        left = self.getDepth(root.left)
        right = self.getDepth(root.right)
        if left==-1 or right==-1 or abs(left-right)>1:
            return -1
        return max(left,right)+1

/*
  Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int balance(TreeNode root){
        if(root==null) return 0;
        int left=balance(root.left);
        int right=balance(root.right);
        if(left==-1||right==-1) return -1;
        if(Math.abs(left-right)>1) return -1;
        return Math.max(left,right)+1;
    }
    public boolean isBalanced(TreeNode root) {
        return balance(root)>=0;
    }
}
