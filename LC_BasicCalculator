/*
only 1 digit nums and no spaces +-*/ 
no parentheses

*/
static int calculate(String a) {
        if(a==null||a.length() == 0) {
            throw new RuntimeException("Invalid input");
        }
        int num =0, op = 0, ret=0,sign=1, cur=0, pre = 0;
        for(int i = 0;i<a.length();i++) {
            char c = a.charAt(i);
            if(c=='+' || c=='-') {
                 if(op == 0) {
                     pre = pre + sign* cur;
                     cur = 0;
                 }
                 sign = c=='+'?1:-1;
            } else if(c=='*' || c=='/') {
                op = c=='*'?1:-1;

            } else {
                num = c-'0';
                if(op!=0) {
                    cur = op==1?cur*num:cur/num;
                    op = 0;
                } else {
                    cur = num;
                }
            }
        }
        return pre + sign*cur;
    }

/*
Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.

You may assume that the given expression is always valid.

Some examples:
"3+2*2" = 7
" 3/2 " = 1
" 3+5 / 2 " = 5
Note: Do not use the eval built-in library function.
Solution:
1. lower precedence is +/- denoted by pre and sign 
2. *// are high precedence denoted by cur and op 
3. op==0 is lower precedence, and op == 1 is multiply and op==-1 is divide.

*/

public int calculate(String s) {
    int pre = 0, curr = 0, sign = 1, op = 0, num = 0;

    for (int i = 0; i < s.length(); i++) {
        if (Character.isDigit(s.charAt(i))) {
            num = num * 10 + (s.charAt(i) - '0');
            if (i == s.length() - 1 || !Character.isDigit(s.charAt(i + 1))) {
                curr = (op == 0 ? num : (op == 1 ? curr * num : curr / num));
            }

        } else if (s.charAt(i) == '*' || s.charAt(i) == '/') {
            op = (s.charAt(i) == '*' ? 1 : -1);
            num = 0;

        } else if (s.charAt(i) == '+' || s.charAt(i) == '-') {
            pre += sign * curr;
            sign = (s.charAt(i) == '+' ? 1 : -1);
            op = 0;
            num = 0;
        }
    }

    return pre + sign * curr;
}

/*
Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, 
non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
*/
public int calculate(String s) {
    if (s.length() == 0) return 0;
    s = "(" + s + ")";
    int[] p = {0};
    return eval(s, p);
}
// calculate value between parentheses
private int eval(String s, int[] p){
    int val = 0;
    int i = p[0]; 
    int oper = 1; //1:+ -1:-
    int num = 0;
    while(i < s.length()){
        char c = s.charAt(i);
        switch(c){
            case '+': val = val + oper * num; num = 0; oper = 1; i++; break;// end of number and set operator
            case '-': val = val + oper * num; num = 0; oper = -1; i++; break;// end of number and set operator
            case '(': p[0] = i + 1; val = val + oper * eval(s, p); i = p[0]; break; // start a new eval
            case ')': p[0] = i + 1; return val + oper * num; // end current eval and return. Note that we need to deal with the last num
            case ' ': i++; continue;
            default : num = num * 10 + c - '0'; i++;
        }
    }
    return val;
}
