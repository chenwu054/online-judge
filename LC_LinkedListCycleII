/*
  Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?
*/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(head==null)
            return null;
        ListNode fast=head.next,slow=head;
        //1.detect cycle
        while(fast!=null&&fast!=slow){
            slow=slow.next;
            fast=fast.next;
            //whenever there is a next, must check it is null!
            if(fast==null || fast.next==null)
                return null;
            fast=fast.next;
        }
        if(fast==null)
            return null;
        //2.find cycle length
        int len = 1;
        fast=slow.next;
        while(fast!=slow){
            fast=fast.next;
            len++;
        }
        //3.find the starting node;
        fast=head;
        slow=head;
        int i=1;
        while(i<len){
            fast=fast.next;
            i++;
        }
        while(fast.next!=slow){
            fast=fast.next;
            slow=slow.next;
        }
        return slow;
    }
}
