public class Solution {
    public int mySqrt(int x) {
        if(x <= 1) {
            return x;
        }
        int s = 1, e = x;
        int m = 0, ret = 0;
        while(s <= e) {
            m = s + ((e - s) >> 1);
            if(x / m == m) {
                return m;
            }
            if(x / m > m) {
                s = m + 1;
                ret = m;
            }
            else {
                e = m - 1;
            }
        }
        return ret;
    }
}

/*
  Implement int sqrt(int x).

  Compute and return the square root of x.
*/
public class Solution {
    public int sqrt(int x) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(x<0)
            return 0;
        if(x<=1)
            return x;
        int start=1,end=Integer.MAX_VALUE;
        int mid=0;
        while(start<=end){
            mid=start+(end-start)/2;
            if(mid<x/mid){
                start=mid+1;
            }
            else if(mid>x/mid){
                end=mid-1;
            }
            else
                return mid;
        }
        return end;
    }
}

double sqrt(double num,double epsilon)
    {
       if(num<=0)  
           return 0.0;
       if(num==1.0)
          return 1.0
       double start=num>1.0?1.0:0.0;
       double end=num>1.0?num:1.0;
       while( end-start>epsilon )
       {
           double mid= start+(end-start)/2.0;
           if( Math.abs(mid-num/mid)<epsilon)
               return mid;
           else if(mid>start/mid)
               start=mid;
           else
               end=mid;
       }
       return 0.0;
    }
