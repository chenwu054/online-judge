/*
Given an integer matrix, find a submatrix where the sum of numbers is zero. Your code should return the coordinate of the left-up and right-down number.
Have you met this question in a real interview?
Example

Given matrix

[
  [1 ,5 ,7],
  [3 ,7 ,-8],
  [4 ,-8 ,9],
]

return [(1,1), (2,2)]
Challenge

O(n3) time.

Solution: similar to array finding subarray sum to 0. using map to store the prior values and do subtraction.

*/
class Solution:
    # @param {int[][]} matrix an integer matrix
    # @return {int[][]} the coordinate of the left-up and right-down number
    def submatrixSum(self, matrix):
        # Write your code here
        n,m=len(matrix),len(matrix[0])
        rowMx = [[0 for j in range(m+1)] for i in range(n+1)]
        for i in range(1,n+1):
            for j in range(1,m+1):
                rowMx[i][j]=rowMx[i][j-1]+matrix[i-1][j-1]
        for i in range(1,m+1):
            for j in range(i):
                sumMap={}
                tot = 0
                for k in range(n+1):
                    tot+=rowMx[k][i]-rowMx[k][j]
                    if tot in sumMap:
                        left = sumMap[tot]
                        right=(k-1,i-1)
                        ret = [left,right]
                        return ret
                    else:
                        left= (k,j)
                        sumMap[tot]=left
        return None
