public class Solution {
    public void wiggleSort(int[] nums) {
		if(nums==null||nums.length<2) {
            return;
        }
        // find median 
        int n = nums.length, offset = n%2;
        int idx = findKth(nums, 0, n-1, (n)/2 + offset);
        // 
        List<Integer> la = new ArrayList<>();
        for(int i =0;i<=idx;i++) {
            la.add(nums[i]);
        }
        List<Integer> lb = new ArrayList<>();
        for(int i =idx+1;i<n;i++) {
            lb.add(nums[i]);
        }
        for(int i = 0, ia = la.size()-1, ib=lb.size()-1;ib>=0;i+=2) {
            nums[i] = la.get(ia--);
            nums[i+1] = lb.get(ib--);
        }
        if(offset>0) {
            nums[n-1] = la.get(0);
        }
        
    }
    
    int findKth(int[] a, int start, int end, int k) {
        int l = start, r= end,p=0;
        while(start<end) {
            l = start;
            r = end;
            p = a[start+((end-start)>>1)];
            int i =l;
            while(i<=r) { // key use partition: must have median duplicates in the center!!!
                while(i<=r && a[i] == p) {
                    i++;
                }
                while(i<=r && a[i]<p) {
                    swap(a, i++, l++);
                }
                while(i<=r && a[r] > p) {
                    r--;
                }
                if(i<r) {
                    swap(a, i, r);
                }
            }
            if(l > k-1) {
                end = r-1;
            } else if(r < k-1) {
                start = r+1;
            } else {
                return k-1;
            }
        }
        return start;
    }
    void swap(int[] a, int l, int r) {
        int temp  = a[l];
        a[l] = a[r];
        a[r] = temp;
    }
}

/*
Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].
*/
public class Solution {
    public void wiggleSort(int[] nums) {
        if(nums==null) {
            return;
        }
        for(int i = 1;i<nums.length;i++) {
            if(i%2 == 1 && nums[i] < nums[i-1] || i%2 == 0 && nums[i] > nums[i-1]){
                swap(nums,i,i-1);
            }
        }
    }
    void swap(int[] a,int i, int j) {
        int t = a[i];
        a[i]= a[j];
        a[j] = t;
    }
}
