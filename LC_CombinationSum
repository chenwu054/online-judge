/*
  Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

  The same repeated number may be chosen from C unlimited number of times.

  Note:
  All numbers (including target) will be positive integers.
  Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
  The solution set must not contain duplicate combinations.
  For example, given candidate set 2,3,6,7 and target 7, 
  A solution set is: 
  [7] 
  [2, 2, 3] 
*/

public List<List<Integer>> combinationSum2(int[] num, int target) {
    // write your code here
    List<List<Integer>>ret=new ArrayList<List<Integer>>();
    if(num==null||num.length==0){
        return ret;
    }
    Arrays.sort(num);
    recursiveCombine(num,0,target,new ArrayList<Integer>(),ret);
    return ret;
}
public void recursiveCombine(int[] num, int start, int left, List<Integer>list,List<List<Integer>> ret){
    if(left==0){
        List<Integer> newList=new ArrayList<Integer>(list);
        ret.add(newList);
        return;
    }
    if(start>=num.length){
        return;
    }
    list.add(0);
    for(int i=start;i<num.length;i++){
        if(num[i]>left){
            break;
        }
        list.set(list.size()-1,num[i]);
        recursiveCombine(num,i+1,left-num[i],list,ret);
        //skip duplicates: important!!
        while(i+1<num.length && num[i]==num[i+1]){
            i++;
        }
    }
    list.remove(list.size()-1);
}
    
//recursion method
public class Solution {
    public void combine(int[] c, int start, ArrayList<Integer>cur, int sum, int target, ArrayList<ArrayList<Integer>>col){
        if(sum>target || start>=c.length)
            return;
        if(sum==target){
            col.add(cur);
            return;
        }
        for(int i=start;i<c.length;i++){
            ArrayList<Integer> newCur= new ArrayList<Integer>(cur);
            newCur.add(c[i]);
            combine(c,i,newCur,sum+c[i],target,col);
        }
    }
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        if(candidates==null||candidates.length==0)
            return ret;
        Arrays.sort(candidates);
        combine(candidates,0,new ArrayList<Integer>(),0,target,ret);
        return ret;
    }
}
