/*
Given n balloons, indexed from 0 to n-1. 
Each balloon is painted with a number on it represented by array nums. 
You are asked to burst all the balloons. 
If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. 
Here left and right are adjacent indices of i. 
After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note: 
(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100

Example:

Given [3, 1, 5, 8]

Return 167

    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
 
   
Solution: 
in the reverse way: like pump the balloon from the zero to all. 
So, the first bursted is the last pumped; last bursted is the first pumped. 
So, the first pumped in range (i, i + len) would be (i - 1) * (j) * (i + len + 1), the immediate adjecent balloons outside the range.
then the bursted/pumped balloon coins will be dp[i][j - 1] + (coins of the first pumped / last bursted) + dp[j + 1][i + len + 1];
*/
public class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;
        if(n == 0) {
            return 0;
        }
        int max = 0;
        int[][] dp = new int[n][n];
        for(int len = 0; len < n; len++) {
            for(int i = 0; i < n - len; i++) {
                int result = 0;
                for(int j = i; j <= i + len; j++) {
                    result = Math.max(result, (j>0?dp[i][j-1]:0) // the smaller problem
                    + (i>0?nums[i-1]:1)*nums[j]*((i+len+1<n)?nums[i+len+1]:1) // key! 
                    + ((j+1<n)?dp[j+1][i+len]:0)); // smaller problem
                    
                }
                dp[i][i+len] = result;
            }
        }
        return dp[0][n-1];
    }
}
