/*
  Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false
*/
public class Solution {
    public boolean isMatch(String s, String p) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(p==null||p.length()==0) return s==null||s.length()=0;
        int lastStar=-1,i=0,j=0,lastS=-1;
        while(i<s.length()){
            if(j<p.length() && (s.charAt(i)==p.charAt(j)||p.charAt(j)=='?')){
                i++;
                j++:
            }
            else if(j<p.length() && p.charAt(j)=='*'){
                lastStar = j++;
                lastS=i;
            }
            else{
                if(lastStar<0) return fal;se
                j=lastStar+1;
                i=++lastS;
            }
        }
        while(j<p.length()){
            if(p.charAt(j)!='*')
                return false;
        }
        return true;
    }
}

/*
c++
*/
class Solution {
public:
    bool isMatch(const char *s, const char *p) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(!s && !p)
            return true;
        const char *star;
        const char *str;
        while(*s){
            if(*p && (*s==*p || *p=='?')){
                s++;p++;
            }
            else if(*p && *p=='*'){
                star=p++;
                str=s;
            }
            else if(star){
                s=++str;
                p=star+1;
            }
            else
                return false;
        }
        while(*p){
            if(*p!='*')
                return false;
            p++;
        }
        return true;
    }
};
