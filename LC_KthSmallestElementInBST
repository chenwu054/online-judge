/*

Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Hint:

    Try to utilize the property of a BST.
    What if you could modify the BST node's structure?
    The optimal runtime complexity is O(height of BST).

*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root==null) return 0;
        Stack<TreeNode> s = new Stack<TreeNode>();
        s.push(root);
        while(s.peek().left!=null){
            s.push(s.peek().left);
        }
        TreeNode ret = null;
        while(k>0){
            ret=s.pop();
            if(ret.right!=null){
                s.push(ret.right);
                while(s.size()>0 && s.peek().left!=null){
                    s.push(s.peek().left);
                }
            }
            k--;
        }
        return ret.val;
    }
}
