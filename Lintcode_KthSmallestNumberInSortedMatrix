/*
Find the kth smallest number in at row and column sorted matrix.

Have you met this question in a real interview? Yes
Example
Given k = 4 and a matrix:

[
  [1 ,5 ,7],
  [3 ,7 ,8],
  [4 ,8 ,9],
]
return 5

Challenge
O(k log n), n is the maximal number in width and height.
Solution: using heap and pop k times.
        O(klgn) -> only add number when needed, no need to initially add all m or n elements
        NOT passing all testcase: time limit exceeded
*/
from heapq import heappush,heappop

class Item:

    def __init__(self,row,col,value):
        self.row=row
        self.col=col
        self.value=value
    def __cmp__(self, other):
        return self.value - other.value
        
class Solution:
    # @param matrix: a matrix of integers
    # @param k: an integer
    # @return: the kth smallest number in the matrix
    def kthSmallest(self, matrix, k):
        # write your code here
        n = len(matrix)
        m = len(matrix[0])
        heap = []
        heappush(heap,Item(0,0,matrix[0][0]))
        if n>m:
            i = 0
            while i<k-1:
                cur = heappop(heap)
                if cur.col<m-1:
                    heappush(heap,Item(cur.row,cur.col+1,matrix[cur.row][cur.col+1]))
                if cur.col==0 and cur.row<n-1:
                    heappush(heap,Item(cur.row+1,cur.col,matrix[cur.row+1][cur.col]))
                i+=1
            return  heappop(heap).value
        else:
            i = 0
            while i<k-1:
                cur = heappop(heap)
                if cur.row<n-1:
                    heappush(heap,Item(cur.row+1,cur.col,matrix[cur.row+1][cur.col]))
                if cur.row==0 and cur.col<m-1:
                    heappush(heap,Item(cur.row,cur.col+1,matrix[cur.row][cur.col+1]))
                i+=1
        return  heappop(heap).value
