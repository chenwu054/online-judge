public class Solution {
    public int hIndex(int[] c) {
        if(c == null) {
            return 0;
        }
        int n = c.length;
        int s = 0, e = n-1, r = e, m =0, l=0, h =0;
        while(s<=e) {
            l = s+1;
            r = e;
            int p = c[s];
            while(l<=r) {
                while(l<=r && c[l] < p) { // need =
                    c[l-1] = c[l];
                    l++;
                }
                while(l<=r && c[r] >= p) { // need =
                    r--;
                }
                if(l<r) {
                    swap(c, l, r); // no need to write l++;r--;
                }
            }
            c[r] = p;
            if(n-r<=p) {
                h = Math.max(h, n-r); // key
                e = r - 1;
            } else {
                s = r + 1;
            }
        }
        return h;
    }
    void swap(int[] c, int i, int j) {
        int t = c[i];
        c[i] = c[j];
        c[j] = t;
    }
}

/*
What if the citations array is sorted in ascending order? Could you optimize your algorithm?

*/
public class Solution {
    public int hIndex(int[] c) {
        if(c == null || c.length == 0) {
            return 0;
        }
        int s = 0, e = c.length -1, m = 0;
        int maxH = 0;
        while(s <= e) {
            m = s + ((e - s) >> 1);
            if(c[m] == c.length - m) {
                return c.length - m;
            }
            else if(c.length - m < c[m]) {
                maxH = Math.max(maxH, c.length - m);
                e = m -1;
            }
            else {
                maxH = Math.max(maxH, c[m]);
                s = m + 1;
            }
        }
        return maxH;
    }
}

/*
Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.

Note: If there are several possible values for h, the maximum one is taken as the h-index.

Hint:

An easy approach is to sort the array first.
What are the possible values of h-index?
A faster approach is to use extra space.

*/
// using quick select - O(n)
public class Solution {
    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
    
    public int hIndex(int[] c) {
        if(c == null || c.length == 0) {
            return 0;
        }
        // binary search 
        int n = c.length, s = 0, e = n - 1, m = 0;
        int maxH = 0;
        while(s <= e) {// important allow equal 
            m = s + ((e - s) >> 1);
            int ts = s, te = e, p = c[m];
            swap(c, m, ts);
            ts++;
            while(ts <= te) { // important allow equal
                while(ts <= te && c[ts] <= p) { // invariant: ts is the first one uncertain.
                    c[ts - 1] = c[ts];
                    ts++;
                }
                while(ts <= te && c[te] > p) { // invariant: te is the first one uncertain.
                    te--;
                }
                if(ts < te) { // swap only when they are not equal. does not matter. NO need to increment/decrement 
                    swap(c, te, ts);
                }
            }
            c[te] = p; // set te to be the pivot, since we used c[ts]<=p, so te is the last that is <= p, which should be pivot
            if(n - te == c[te]) {
                return n - te;
            }
            if(n - te < c[te]) {
                 maxH = Math.max(maxH, n - te);
                 e = te - 1;
            }
            else {
                maxH = Math.max(maxH, c[te]);
                s = te + 1;
            }
        }
        return maxH;
    }
}

public class Solution {
    public int hIndex(int[] c) {
        if(c == null || c.length == 0) {
            return 0;
        }
        Arrays.sort(c);
        int i = c.length - 1;
        int maxH = 0;
        while(i >= 0) {
            maxH = Math.max(maxH, Math.min(c[i], c.length - i));
            i--;
        }
        return maxH;
    }
}
