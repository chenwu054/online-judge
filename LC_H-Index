/*
What if the citations array is sorted in ascending order? Could you optimize your algorithm?

*/
public class Solution {
    public int hIndex(int[] c) {
        if(c == null || c.length == 0) {
            return 0;
        }
        int s = 0, e = c.length -1, m = 0;
        int maxH = 0;
        while(s <= e) {
            m = s + ((e - s) >> 1);
            if(c[m] == c.length - m) {
                return c.length - m;
            }
            else if(c.length - m < c[m]) {
                maxH = Math.max(maxH, c.length - m);
                e = m -1;
            }
            else {
                maxH = Math.max(maxH, c[m]);
                s = m + 1;
            }
        }
        return maxH;
    }
}

/*
Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.

Note: If there are several possible values for h, the maximum one is taken as the h-index.

Hint:

An easy approach is to sort the array first.
What are the possible values of h-index?
A faster approach is to use extra space.

*/
public class Solution {
    public int hIndex(int[] c) {
        if(c == null || c.length == 0) {
            return 0;
        }
        Arrays.sort(c);
        int i = c.length - 1;
        int maxH = 0;
        while(i >= 0) {
            maxH = Math.max(maxH, Math.min(c[i], c.length - i));
            i--;
        }
        return maxH;
    }
}
