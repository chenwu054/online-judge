/*
Given a binary tree, find the maximum path sum.

The path may start and end at any node in the tree.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public Integer maxPath(TreeNode root,Integer[] max){
        if(root==null)
            return null;
        Integer left = maxPath(root.left,max);
        Integer right = maxPath(root.right,max);
        int curMax=root.val;
        int path=0;
        if(left!=null && left>0){
            curMax+=left;
            path=left;
        }
        if(right!=null && right>0){
            curMax+=right;
            path=Math.max(path,right);
        }
        if(curMax>max[0]){
            max[0]=curMax;
        }
        return root.val+path;
    }
    public int maxPathSum(TreeNode root) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(root==null)
            return 0;
        Integer[] max={root.val};
        maxPath(root,max);
        return max[0];
    }
}
