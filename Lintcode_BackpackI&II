/*
Given n items with size Ai and value Vi, and a backpack with size m. What's the maximum value can you put into the backpack?
Have you met this question in a real interview?
Example

Given 4 items with size [2, 3, 5, 7] and value [1, 5, 2, 4], and a backpack with size 10. The maximum value is 9.
Note

You cannot divide item into small pieces and the total size of items you choose should smaller or equal to m.
Challenge

O(n x m) memory is acceptable, can you do it in O(m) memory?

Solution: dp[m+1][n] -> dp[i][j]: max value at size i and index j
*/
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A & V: Given n items with size A[i] and value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] a, int v[]) {
        // write your code here
        if(a==null||a.length==0){
            return 0;
        }
        int n = a.length;
        int[][] dp = new int[m+1][n];
        for(int i=1;i<=m;i++){
            dp[i][0]=(i>=a[0])?v[0]:0;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=Math.max(dp[i][j-1],(i>=a[j]?v[j]+dp[i-a[j]][j-1]:0));
            }
        }
        return dp[m][n-1];
    }
}
/*
O(m) space: keep two arrays and switch back and forth

*/
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A & V: Given n items with size A[i] and value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] a, int v[]) {
        // write your code here
        if(a==null||a.length==0){
            return 0;
        }
        int n = a.length;
        int[][] d = new int[m+1][2];
        for(int i=1;i<=m;i++){
            d[i][0]=(i>=a[0])?v[0]:0;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<=m;j++){
                d[j][i%2]=Math.max(d[j][(i-1)%2],(j>=a[i]?d[j-a[i]][(i-1)%2]+v[i]:0));
            }
        }
        return d[m][(n-1)%2];
    }
}



/*
Given n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?
Have you met this question in a real interview?
Example

If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.

You function should return the max size we can fill in the given backpack.
Note

You can not divide any item into small pieces.
Challenge

O(n x m) time and O(m) memory.

O(n x m) memory is also acceptable if you do not know how to optimize memory.

Solution: dp[m+1][n] -> dp[i][j] -> if at index j, there is a sum equal to i.  
*/
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] a) {
        // write your code here
        if(a==null || a.length==0){
            return 0;
        }
        int n = a.length;
        boolean[][] dp=new boolean[m+1][n];
        dp[0][0]=true; //important!!
        for(int i=1;i<=m;i++){ 
            dp[i][0]=a[0]==i;  //a[0] not a[i], setting the column
        }
        for(int i=1;i<n;i++){
            dp[1][i]=dp[1][i-1]||a[i]==1;
            dp[0][i]=true; // important
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i][j-1]||(i>=a[j] && dp[i-a[j]][j-1]);
            }
        }
        for(int i=m;i>=0;i--){
            if(dp[i][n-1]){
                return i;
            }
        }
        return 0;
    }
}
