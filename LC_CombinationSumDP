// combination sum dp
/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3]
*/
public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] c, int target) {
        ArrayList<ArrayList<Integer>> ret =new ArrayList<ArrayList<Integer>>();
        if(c==null||c.length==0)
            return ret;
        ArrayList<ArrayList<ArrayList<Integer>>> dp = new ArrayList<ArrayList<ArrayList<Integer>>>();
       dp.add(new ArrayList<ArrayList<Integer>>());
       dp.get(0).add(new ArrayList<Integer>());
       Arrays.sort(c);
       for(int i=1;i<=target;i++){
           dp.add(new ArrayList<ArrayList<Integer>>());
           for(int j=0;j<c.length;j++){
               if(i-c[j]>=0){
                    for(ArrayList<Integer> arr : dp.get(i-c[j])){
  		if(arr.size()==0 || c[j]>=arr.get(arr.size()-1)){
  			ArrayList<Integer> newRow = new ArrayList<Integer>(arr);
  		    newRow.add(c[j]);
  			dp.get(i).add(newRow);
  		}
                   }
               }
           }
       }
       return dp.get(target);
    }
}
