/*
A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

For example, given three people living at (0,0), (0,4), and (2,2):

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (0,2) is an ideal meeting point, as the total travel distance of 2+2+2=6 is minimal. So return 6.

Solution:
1. find the middle point (where people number on the right == ppl number on the right) of both x and y
2. get the distance from ppl to this middle point 
NOTE:
Binary search:
1. if there is no exact middle point i.e. a[mid] == target, then use either one of the other two branches to populate ret.

*/
public class Solution {
    public int minTotalDistance(int[][] grid) {
        if(grid == null || grid.length == 0) {
            return 0;
        }
        int n = grid.length, m=grid[0].length, tot=0;
        int[] y = new int[n];
        int[] x = new int[m];
        for(int i =0 ;i<n;i++) {
            for(int j = 0; j<m;j++) {
                if(grid[i][j] > 0) {
                    y[i] += grid[i][j];
                    x[j] += grid[i][j];
                    tot+=grid[i][j];
                }
            }
        }
        int ret = 0;
        ret += findMedian(x, tot);
        ret += findMedian(y, tot);
        return ret;
    }
    private int findMedian(int[] a,int tot) {
        int n = a.length;
        int[] sum = new int[n];
        for(int i = 0;i<n;i++) {
            sum[i] = (i>0?sum[i-1]:0) + a[i];
        }
        int m = (tot+1) / 2, s = 0, e = n-1;
        int p = 0;
        while(s<=e) {
            int mid = s + ((e-s)>>1);
            if(sum[mid] >= m) {
                e = mid -1;
                p = mid;
            } else if(sum[mid] < m) {
                s = mid+1;
            }
        }
        int ret = 0;
        for(int i =0;i<n;i++) {
            if(a[i] > 0) {
                ret+= a[i] * Math.abs(p-i);
            }
        }
        return ret;
    }
    
}
