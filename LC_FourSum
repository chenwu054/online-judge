/*
  Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
*/
public class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] num, int target) {
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        Arrays.sort(num);
        int sum=0;
        for(int i=0;i<num.length-3;){
            int j=i+1;
            while(j<num.length-2){
                int s=j+1,k=num.length-1;
                while(s<k){
                    sum=num[i]+num[j]+num[s]+num[k];
                    if(sum>target){
                        k--;
                        while(s<k && num[k]==num[k+1])
                            k--;
                        continue;
                    }
                    else if(sum==target){
                        ArrayList<Integer> arr = new ArrayList<Integer>();
                        arr.add(num[i]);
                        arr.add(num[j]);
                        arr.add(num[s]);
                        arr.add(num[k]);
                        ret.add(arr);
                        s++;
                    }
                    else{
                        s++;
                    }
                    while(s<k && num[s]==num[s-1])
                        s++;
                }
                j++;
                while(j<num.length-2 && num[j]==num[j-1]) j++;
            }
            i++;
            while(i<num.length-3 && num[i]==num[i-1]) i++;
        }
        return ret;
    }
}
