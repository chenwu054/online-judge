/*
  Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ListNode less = new ListNode(0);
        ListNode more = new ListNode(0);
        ListNode lessNode=less;
        ListNode moreNode=more;
        ListNode node=head;
        while(node!=null){
            if(node.val<x){
                lessNode.next=node;
                lessNode=lessNode.next;
            }
            else{
                moreNode.next=node;
                moreNode=moreNode.next;
            }
            node=node.next;
        }
        moreNode.next=null;
        lessNode.next=more.next;
        return less.next;
    }
}
