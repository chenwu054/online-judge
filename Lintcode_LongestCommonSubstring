/*
Given two strings, find the longest common substring.

Return the length of it.

Have you met this question in a real interview? Yes
Example
Given A = "ABCD", B = "CBCE", return 2.

Note
The characters in substring should occur continuously in original string. This is different with subsequence.

Challenge
O(n x m) time and memory
*/

class Solution:
    # @param A, B: Two string.
    # @return: the length of the longest common substring.
    def longestCommonSubstring(self, A, B):
        # write your code here
        if A==None or B==None or len(A)==0 or len(B)==0:
            return 0
        n,m=len(A),len(B)
        dp=[[0 for i in range(m)] for j in range(n)]
        maxLen=0
        for i in range(n):
            dp[i][0]=0 if A[i]!=B[0] else 1
            maxLen=max(maxLen,dp[i][0])
        for j in range(m):
            dp[0][j]=0 if A[0]!=B[0] else 1
            maxLen=max(maxLen,dp[0][j])
        for i in range(1,n):
            for j in range(1,m):
                dp[i][j]=0 if A[i]!=B[j] else (dp[i-1][j-1]+1)
                maxLen=max(maxLen,dp[i][j])
    
        return maxLen
