/*
  You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ListNode n1 = l1;
        ListNode n2 = l2;
        int len1=0,len2=0;
        while(n1!=null){
            len1++;
            n1=n1.next;
        }
        while(n2!=null){
            len2++;
            n2=n2.next;
        }
        if(len1<len2)
            return addTwoNumbers(l2,l1);
        int sum = 0,carry=0;
        n1=l1;n2=l2;
        while(true){
            sum=carry+n1.val+(n2==null?0:n2.val);
            carry=sum/10;
            sum=sum%10;
            n1.val=sum;
            if(n1.next==null)
                break;
            n1=n1.next;
            n2=n2==null?n2:n2.next;
        }
        if(carry>0)
            n1.next=new ListNode(carry);
        return l1;
    }
}
