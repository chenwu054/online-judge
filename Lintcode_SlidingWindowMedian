/*
Given an array of n integer, and a moving window(size k), move the window at each iteration from the start of the array, find the median of the element inside the window at each moving. (If there are even numbers in the array, return the N/2-th number after sorting the element in the window. )
Have you met this question in a real interview?
Example

For array [1,2,7,8,5], moving window size k = 3. return [2,7,7]

At first the window is at the start of the array like this

[ | 1,2,7 | ,8,5] , return the median 2;

then the window move one step forward.

[1, | 2,7,8 | ,5], return the median 7;

then the window move one step forward again.

[1,2, | 7,8,5 | ], return the median 7;
Challenge

O(nlog(n)) time

Solution: Instead of PriorityQueue, which takes O(n) time to remove, TreeMap is used.
Note: pay attention to duplicates, must use minSize[] and maxSize to record the sizes of min TreeMap and max TreeMap.
create small methods for reuse.

The time complexity is O(nlg(k))

*/
public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: The median of the element inside the window at each moving.
     */
    public  ArrayList<Integer> medianSlidingWindow(int[] nums, int k) {
        // write your code here
        ArrayList<Integer> ret = new ArrayList<Integer>();
        int n=nums.length;
        if(nums==null || n==0){
            return ret;
        }
        TreeMap<Integer,Integer> min = new TreeMap<Integer,Integer>();
        TreeMap<Integer,Integer> max = new TreeMap<Integer,Integer>();
        int[] minNum={0},maxNum={0};
        int i=0;
        while(i<k-1){
        	addKeyRemainBalance(max,maxNum,min,minNum,nums[i]);
            i++;
        }
        while(i<n){
        	addKeyRemainBalance(max,maxNum,min,minNum,nums[i]);
            ret.add(max.lastKey());
            int remove= nums[i-k+1];
            //remove
            removeKeyRemainBalance(max,maxNum,min,minNum,nums[i-k+1]);
            i++;
        }
        return ret;
    }
   //add a particular key to the maps and maintain balance 
	public  void addKeyRemainBalance(TreeMap<Integer,Integer> max,int[] maxSize, TreeMap<Integer,Integer> min, int[] minSize, int key){
		if(min.size()>0 && min.firstKey()<key){
			addKey(min,key);
			minSize[0]=minSize[0]+1;
		}
		else{
			addKey(max,key);
			maxSize[0]=maxSize[0]+1;
		}
		balance(max,maxSize,min,minSize);
	}
	//balance the treemaps sizes. 
	//the only allowed sizes are 1. same size 2. maxSize-minSize==1 => therefore, the median is max.lastKey()
	public  void balance(TreeMap<Integer,Integer> max,int[] maxSize, TreeMap<Integer,Integer> min, int[] minSize){
		if(maxSize[0]-minSize[0]==2){
			moveFromMaxToMin(max,min);
			maxSize[0]=maxSize[0]-1;
			minSize[0]=minSize[0]+1;
		}
		else if(minSize[0]>maxSize[0]){
			moveFromMinToMax(max,min);
			maxSize[0]=maxSize[0]+1;
			minSize[0]=minSize[0]-1;
		}
	}
	//remove particular key from either of the treemaps and maintain balance  
	public  void removeKeyRemainBalance(TreeMap<Integer,Integer> max,int[] maxSize, TreeMap<Integer,Integer> min, int[] minSize, int key){
		if(min.containsKey(key)){
			if(min.get(key)>1){
				min.put(key, min.get(key)-1);
			}
			else{
				min.remove(key);
			}
			minSize[0]=minSize[0]-1;
		}
		else if(max.containsKey(key)){
			if(max.get(key)>1){
				max.put(key, max.get(key)-1);
			}
			else{
				max.remove(key);
			}
			maxSize[0]=maxSize[0]-1;
		}
		balance(max,maxSize,min,minSize);
	}
	//move 1 key from max to min treemap
	public  void moveFromMaxToMin(TreeMap<Integer,Integer>max,TreeMap<Integer,Integer>min){
		if(max.size()==0){
			return;
		}
		Map.Entry<Integer,Integer> entry = max.lastEntry();
		if(entry.getValue()>1){
			max.put(entry.getKey(), entry.getValue()-1);
		}
		else{
			max.remove(entry.getKey());
		}
		if(min.containsKey(entry.getKey())){
			min.put(entry.getKey(),min.get(entry.getKey())+1);
		}
		else{
			min.put(entry.getKey(),1);
		}
	}
	//move 1 key from min to max treemap
	public  void moveFromMinToMax(TreeMap<Integer,Integer>max,TreeMap<Integer,Integer>min){
		if(min.size()==0){
			return;
		}
		Map.Entry<Integer,Integer> entry = min.firstEntry();
		if(entry.getValue()>1){
			min.put(entry.getKey(), entry.getValue()-1);
		}
		else{
			min.remove(entry.getKey());
		}
		if(max.containsKey(entry.getKey())){
			max.put(entry.getKey(),max.get(entry.getKey())+1);
		}
		else{
			max.put(entry.getKey(),1);
		}
	}
	//remove a key
	public  boolean removeKey(TreeMap<Integer,Integer>map, int key){
		if(!map.containsKey(key)){
			return false;
		}
		if(map.get(key)==1){
			map.remove(key);
		}
		else{
			map.put(key, map.get(key)-1);
		}
		return true;
	}
	// add a key
	public  void addKey(TreeMap<Integer,Integer> map, int key){
		if(map.containsKey(key)){
			map.put(key, map.get(key)+1);
		}
		else{
			map.put(key, 1);
		}
	}
}

