/*
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
*/
public class WordDictionary {
    public WordDictionary() {
        root = new Node();
    }
    Node root;
    class Node {
        boolean isWord;
        Node[] next;
        public Node() {
            next = new Node[26];
        }
    }
    // Adds a word into the data structure.
    public void addWord(String word) {
        Node node = root;
        int i = 0;
        while(i<word.length()) {
            int pos = word.charAt(i)-'a';
            if(node.next[pos] == null) {
                node.next[pos] = new Node();
            }
            node = node.next[pos];
            i++;
        }
        node.isWord = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return search(word, 0, root);
    }
    private boolean search(String word, int start, Node root) {
        if(root==null) {
            return false;
        }
        if(start == word.length()) {
            return root.isWord;
        }
        char c = word.charAt(start);
        if(c=='.') {
            for(int i =0 ;i<26;i++) {
                if(search(word,start+1, root.next[i])) {
                    return true;
                }
            }
        } else {
            return search(word, start + 1, root.next[c-'a']);
        }
        return false;
    }
}

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
