class MinStack(object):

    def __init__(self):
        # do some intialize if necessary
        self.k1 = []
        self.k2 = []
        
    def push(self, x):
        # write yout code here
        self.k1.append(x)
        if len(self.k2)==0 or x<=self.k2[-1]:
            self.k2.append(x)
        
    def pop(self):
        # pop and return the top item in stack
        ret = self.k1.pop()
        if(len(self.k2)>0 and ret==self.k2[-1]):
            self.k2.pop()
        return ret
            
    def min(self):
        # return the minimum number in stack
        if(len(self.k2)>0):
            return self.k2[-1]
        return None

/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
*/
class MinStack {
    Stack<Integer>minStack;
    Stack<Integer>stack;
    public MinStack(){
        minStack = new Stack<Integer>();
        stack = new Stack<Integer>();
    }
    
    public void push(int x) {
        stack.push(x);
        if(minStack.empty() || minStack.peek().intValue()>=x){
            minStack.push(x);
        }
    }

    public void pop() {
        Integer top  = stack.pop();
        if(!minStack.empty() && top.intValue() == minStack.peek().intValue()){
            minStack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}
