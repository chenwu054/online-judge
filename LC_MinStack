/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
*/
class MinStack {
    Stack<Integer>minStack;
    Stack<Integer>stack;
    public MinStack(){
        minStack = new Stack<Integer>();
        stack = new Stack<Integer>();
    }
    
    public void push(int x) {
        stack.push(x);
        if(minStack.empty() || minStack.peek().intValue()>=x){
            minStack.push(x);
        }
    }

    public void pop() {
        Integer top  = stack.pop();
        if(!minStack.empty() && top.intValue() == minStack.peek().intValue()){
            minStack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}
