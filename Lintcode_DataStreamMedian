/*
Numbers keep coming, return the median of numbers at every time a new number added.

Have you met this question in a real interview? Yes
Example
For numbers coming list: [1, 2, 3, 4, 5], return [1, 1, 2, 2, 3].

For numbers coming list: [4, 5, 1, 3, 2, 6, 0], return [4, 4, 4, 3, 3, 3, 3].

For numbers coming list: [2, 20, 100], return [2, 2, 20].

Challenge
Total run time in O(nlogn).

Clarification
What's the definition of Median? - Median is the number that in the middle of a sorted array. 
If there are n numbers in a sorted array A, the median is A[(n - 1) / 2]. 
For example, if A=[1,2,3], median is 2. If A=[1,19], median is 1.
*/
public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    class IntegerComparator implements Comparator<Integer>{
        public int compare(Integer a, Integer b){
            return b-a;
        }
    }
    public int[] medianII(int[] nums) {
        // write your code here
        int[] ret = null;
        if(nums==null) return ret;
        int n=nums.length;
        ret=new int[n];
        PriorityQueue<Integer> minQ =new PriorityQueue<Integer>();
        //priority queue initial size should be at least 1
        PriorityQueue<Integer> maxQ =new PriorityQueue<Integer>(Math.max(1,n/2), new IntegerComparator());
        for(int i=0;i<n;i++){
            if(minQ.size()==maxQ.size()){
                minQ.add(nums[i]);
                Integer last = minQ.poll();
                maxQ.add(last);
            }
            else if(maxQ.size()-minQ.size()==1){
                maxQ.add(nums[i]);
                Integer last = maxQ.poll();
                minQ.add(last);
            }
            ret[i]=maxQ.peek();
        }
        return ret;
    }
}
