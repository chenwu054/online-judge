/*
 Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)
*/
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        if(n==0){
            return new int[0];
        }
        if(n==1){
            int[] one = new int[1];
            return one;
        }
        int[] right = new int[n+1];
        int[] left = new int[n+1];
        left[0]=1;
        right[n]=1;
        for(int i=1;i<=n;i++){
            left[i]=left[i-1]*(i>1?nums[i-2]:1);
            right[n-i]=right[n-i+1]*(i>1?nums[n-i+1]:1);
        }
        int[] ret = new int[n];
        for(int i=0;i<n;i++){
            ret[i]=left[i+1]*right[i];
        }
        return ret;
    }
}
