/*
dp
*/
public class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int start=0, end =0;
        for(int len = 0;len<n;len++) {
            for(int i = 0;i<n-len;i++) {
                if(len==0) {
                    dp[i][i+len] = true;
                } else if(len==1) {
                    dp[i][i+len] = s.charAt(i)==s.charAt(i+len);
                } else {
                    dp[i][i+len] = (s.charAt(i)==s.charAt(i+len)) && dp[i+1][i+len-1];
                }
                if(dp[i][i+len] && len > (end - start)) {
                    start = i;
                    end = i+len;
                }
            }
        }
        return s.substring(start, end+1);
    }
}

/*
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

*/
public class Solution {
    public void find(String s, int start, String[] longest){
        int i=start-1,j=start+1;
        while(i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)){
            i--;
            j++;
        }
        if(j-i-1>longest[0].length()){
            longest[0]=s.substring(i+1,j);
        }
        i=start-1;j=start;
        while(i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)){
            i--;
            j++;
        }
        if(j-i-1>longest[0].length()){
            longest[0]=s.substring(i+1,j);
        }
    }
    public String longestPalindrome(String s) {
        if(s==null) return null;
        String[] longest={""};
        for(int i=0;i<s.length();i++){
            find(s,i,longest);
        }
        return longest[0];
    }
}
