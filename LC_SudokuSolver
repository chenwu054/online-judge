/*
  Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.
*/
public class Solution {
    public boolean valid(char[][] board, int row, int col){
        char ch = board[row][col];
        for(int i=0;i<9;i++){
            if(i!=row && board[i][col]==ch)
                return false;
            if(i!=col && board[row][i]==ch)
                return false;
        }
        int rowStart = row/3*3;
        int colStart=col/3*3;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if((rowStart+i!=row||colStart+j!=col)&&board[rowStart+i][colStart+j]==ch)
                    return false;
            }
        }
        return true;
    }
    public boolean backtrack(char[][] board, int row, int col){
        if(row==board.length) return true;
        if(col==board.length)
            return backtrack(board,row+1,0);
        if(board[row][col]!='.')
            return backtrack(board,row,col+1);
        for(char i='1';i<='9';i++){
            board[row][col]=i;
            if(valid(board,row,col) && backtrack(board,row,col+1))
                return true;
        }
        board[row][col]='.';
        return false;
    }
    public void solveSudoku(char[][] board) {
        backtrack(board,0,0);
    }
}
