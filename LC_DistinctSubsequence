/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.
*/
public class Solution {
    public int numDistinct(String S, String T) {
        if(S==null||T==null||S.length()==0 ||T.length()==0) return 0;
        int n=S.length(),m=T.length();
        int[][] dp = new int[n][m];
        dp[0][0]=S.charAt(0)==T.charAt(0)?1:0;
        for(int i=1;i<n;i++){
            dp[i][0]=dp[i-1][0]+(S.charAt(i)==T.charAt(0)?1:0);
        }
        for(int j=1;j<m;j++){
            dp[0][j]=0;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                dp[i][j]=(S.charAt(i)==T.charAt(j)?dp[i-1][j-1]:0) + dp[i-1][j];
            }
        }
        
        return dp[n-1][m-1];
    }
}
