/*
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Hint:

Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree?
According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Show Company Tags
Show Tags
Hide Similar Problems
*/
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if(n == 0) {
            return false;
        }
        Map<Integer, Set<Integer>> g= buildGraph(edges);
        Set<Integer> u= new HashSet<Integer>();
        Set<Integer> v= new HashSet<Integer>();
        int start = 0;
        if(!dfs(g, start, v)) {
            return false;
        }
        return v.size() == n;
    }
    boolean dfs(Map<Integer, Set<Integer>>g, int start, Set<Integer> v) {
        if(v.contains(start)) {
            return false;
        }
        v.add(start);
        Set<Integer> set = g.get(start);
        if(set!=null) {
            for(Integer i : set) {
                g.get(i).remove(start);
                if(!dfs(g, i, v)) {
                    return false;
                }
            }    
        }
        return true;
    }
    Map<Integer, Set<Integer>> buildGraph(int[][] edges) {
        Map<Integer, Set<Integer>> g = new HashMap<Integer, Set<Integer>>();
        for(int[] a: edges) {
            if(!g.containsKey(a[0])) {
                g.put(a[0], new HashSet<Integer>());
            }
            if(!g.containsKey(a[1])) {
                g.put(a[1], new HashSet<Integer>());
            }
            g.get(a[0]).add(a[1]);
            g.get(a[1]).add(a[0]);
        }
        return g;
    }
}
