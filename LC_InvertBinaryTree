/*
Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null) return null;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Queue<TreeNode> next = new LinkedList<TreeNode>();
        Queue<TreeNode> temp=null;
        q.add(root);
        while(q.size()>0){
            while(q.size()>0){
                TreeNode cur = q.poll();
                TreeNode tmpNode = cur.left;
                cur.left=cur.right;
                cur.right=tmpNode;
                if(cur.left!=null){
                    next.add(cur.left);
                }
                if(cur.right!=null){
                    next.add(cur.right);
                }
            }
            temp = q;
            q=next;
            next=temp;
        }
        return root;
    }
}
