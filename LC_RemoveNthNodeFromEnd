/*
  Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(head==null)
            return null;
        ListNode newHead = new ListNode(0);
        newHead.next=head;
        ListNode node=newHead;
        int left=n;
        while(left>0){
            left--;
            node=node.next;
        }
        ListNode remove = newHead;
        while(node.next!=null){
            node=node.next;
            remove=remove.next;
        }
        remove.next=remove.next.next;
        return newHead.next;
    }
}
