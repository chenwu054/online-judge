public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] ret = null;
        if(nums.length == 0) {
            ret = new int[0];
            return ret;
        }
        LinkedList<Integer> list = new LinkedList<Integer>();
        for(int i = 0; i < k - 1; i++) {
            while(!list.isEmpty() && list.peekLast() < nums[i]) {
                list.pollLast();
            }
            list.offerLast(nums[i]);
        }
        ret = new int[nums.length - k + 1];
        for(int i = 0; i <= nums.length - k; i++) {
            while(!list.isEmpty() && list.peekLast() < nums[k - 1 + i]) {
                list.pollLast();
            }
            list.offerLast(nums[k - 1 + i]);
            ret[i] = list.peekFirst();
            if(list.size() == k || list.peekFirst() == nums[i]) {
                list.pollFirst();
            }
        }
        return ret;
    }
}


/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Therefore, return the max sliding window as [3,3,5,5,6,7].

Note:
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.
*/
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums==null){
            return null;
        }
        int n = nums.length;
        if(n==0 || k==0){
            return new int[0];
        }
        int[] ret = new int[n-k+1];
        LinkedList<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<k-1;i++){
            while(q.size()>0 && q.peekLast()<nums[i]){
                q.pollLast();
            }
            q.add(nums[i]);
        }
        for(int i=k-1;i<n;i++){
        //important, it is < not <=. because need to remove the front 
            while(q.size()>0 && q.peekLast()<nums[i]){
                q.pollLast();
            }
            q.offerLast(nums[i]);
            ret[i-k+1]=q.peekFirst();
            //important: don't forget to remove the front if it is equal to the element in nums
            if(q.size()==k || q.peekFirst()==nums[i-k+1]){
                q.pollFirst();
            }
        }
        return ret;
    }
}
