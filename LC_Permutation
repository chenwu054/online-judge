
public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0) {
            return ret;
        }
        helper(nums, 0, ret);
        return ret;
    }
    public void helper(int[] nums, int start, List<List<Integer>> ret) {
        if(start == nums.length) {
            List<Integer> toAdd = new ArrayList<Integer>();
            for(int i : nums) {
                toAdd.add(i);
            }
            ret.add(toAdd);
            return;
        }
        for(int i = start; i < nums.length; i++) {
            boolean canUse = true; // this is to guarantee the uniqueness
            for(int j = i - 1; j >= start; j--) {
                if(nums[i] == nums[j]) {
                    canUse = false;
                    break;
                }
            }
            if(canUse) {
                swap(nums, i, start);
                helper(nums, start + 1, ret);
                swap(nums, i, start);
            }
        }
    }
    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}


/*
 Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]. 

key: 每次确定一位
*/
public class Solution {
	// use boolean array to avoid duplicates
	public static void permuteHelper(int[] num,boolean[] used, ArrayList<Integer>cur, ArrayList<ArrayList<Integer>>col){
		if(cur.size()==num.length){
			col.add(cur);
			return;
		}
		for(int i=0;i<num.length;i++){
		//important!!
			if(used[i] || (i>0 && num[i]==num[i-1] && !used[i-1]))
				continue;
			used[i]=true;
			ArrayList<Integer> newCur= new ArrayList<Integer>(cur);
			newCur.add(num[i]);
			permuteHelper(num,used,newCur,col);
			used[i]=false;
		}
	}
	public static ArrayList<ArrayList<Integer>> permuteUnique(int[] num){
		ArrayList<ArrayList<Integer>> ret=new ArrayList<ArrayList<Integer>>();
		if(num==null||num.length==0)
			return ret;
		Arrays.sort(num);
		boolean[] used=new boolean[num.length];
		permuteHelper(num,used,new ArrayList<Integer>(),ret);
		return ret;
	}
}

//use hashset to avoid duplicates
public class Solution {
	public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		// Note: The Solution object is instantiated only once and is reused by each test case.
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if (num == null) return result;
		Arrays.sort(num);
		permute(num, 0, result);

        return result;
	}

	private void permute(int[] num, int index, ArrayList<ArrayList<Integer>> result) {
		if (index == num.length) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			for (int i : num) {
				list.add(i);
			}
			result.add(list);
			return;
		}
        HashSet<Integer> used =new HashSet<Integer>();
		for (int i = index; i < num.length; i++) {
		    //if (i < num.length - 1 && num[i] == num[i + 1]) continue;
			if(!used.contains(num[i])){
			    swap(num, index, i);
			    permute(num, index + 1, result);
			    swap(num, index, i);
			    used.add(num[i]);
			}
		}
	}

	private void swap(int[] num, int i, int j)
	{
		int tmp = num[i];
		num[i] = num[j];
		num[j] = tmp;
	}
}
/*
	permutation I
	Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

public class Solution {
    private void swap(int[] num,int i ,int j){
        int temp = num[i];
        num[i]=num[j];
        num[j]=temp;
    }
    private void helper(int[] num, int start,ArrayList<ArrayList<Integer>>ret){
        if(start==num.length){
            ArrayList<Integer> toAdd =new ArrayList<Integer>();
            for(int i:num)
                toAdd.add(i);
            ret.add(toAdd);
            return;
        }
        for(int i=start;i<num.length;i++){
            swap(num,start,i);
            helper(num,start+1,ret);
            swap(num,start,i);
        }
    }
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret =new ArrayList<ArrayList<Integer>>();
        if(num==null||num.length==0)
            return ret;
        helper(num,0,ret);
        return ret;
    }
}
