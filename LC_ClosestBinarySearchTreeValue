/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    void initSucStack(TreeNode root, Stack<TreeNode> suc, double target) {
        while(root != null) {
            if(root.val >= target) {
                suc.push(root);
                if(root.val == target) {
                    return;
                }
                root = root.left;
            } else {
                root = root.right;
            }
        }
    }
    void initPreStack(TreeNode root, Stack<TreeNode> pre, double target) {
        while(root!=null) {
            if(root.val <= target) {
                pre.push(root);
                if(root.val == target) {
                    return;
                }
                root = root.right;
            } else{
                root = root.left;
            }
        }
    }
    Integer getNextSuc(Stack<TreeNode> k) {
        if(k.isEmpty()) {
            return null;
        }
        TreeNode ret = k.pop();
        if(ret.right!=null) {
            k.push(ret.right);
            while(k.peek().left != null) {
                k.push(k.peek().left);
            }
        }
        return ret.val;
    }
    Integer getNextPre(Stack<TreeNode> k) {
        if(k.isEmpty()) {
            return null;
        }
        TreeNode ret = k.pop();
        if(ret.left != null ) {
            k.push(ret.left);
            while(k.peek().right!=null) {
                k.push(k.peek().right);
            }
        }
        return ret.val;
    }
    
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer> ret = new ArrayList<>();
        if(root==null || k ==0) {
            return ret;
        }
        Stack<TreeNode> suc = new Stack<>();
        Stack<TreeNode> pre = new Stack<>();
        initSucStack(root, suc, target);
        initPreStack(root, pre, target);
        if(!suc.isEmpty() && !pre.isEmpty() && suc.peek().val == pre.peek().val) {
            getNextSuc(suc);
        }
        while(ret.size() < k) {
            if(suc.isEmpty()) {
                ret.add(getNextPre(pre));
            } else if(pre.isEmpty()) {
                ret.add(getNextSuc(suc));
            } else {
                if(Math.abs(suc.peek().val - target) < Math.abs(pre.peek().val-target)) {
                    ret.add(getNextSuc(suc));
                } else {
                    ret.add(getNextPre(pre));
                }
            }
        }
        return ret;
    }
}


class Solution {
public:
    void initializePredecessor( TreeNode* cur, stack<TreeNode*>& pre, double target){
        
         while(cur){
            if(cur->val==target){
                pre.push(cur);
                break;
            }
            else if(cur->val < target){
                pre.push(cur);
                cur=cur->right;
            }
            else
                cur=cur->left;
        }
    }
    
    void initializeSucessor( TreeNode* cur, stack<TreeNode*>& suc, double target){
         while(cur){
            if(cur->val==target){
                suc.push(cur);
                break;
            }
            else if(cur->val > target){
                suc.push(cur);
                cur=cur->left;
            }
            else
                cur=cur->right;
        }
    }

        
    int getNextPredecessor(stack<TreeNode*> & pre){
        TreeNode* top= pre.top(); pre.pop();
        TreeNode* cur=top->left;
        while(cur){
            pre.push(cur);
            cur=cur->right;
        }
        return top->val;
    }
    
    int getNextSucessor(stack<TreeNode*>& suc){
        TreeNode* top= suc.top(); suc.pop();
        TreeNode* cur=top->right;
        while(cur){
            suc.push(cur);
            cur=cur->left;
        }
        return top->val;
    }

    vector<int> closestKValues(TreeNode* root, double target, int k) {
        //if( k <=0) return {};
        stack<TreeNode*> pre, suc;
        initializePredecessor(root, pre, target);
        initializeSucessor(root, suc, target);
        if(!pre.empty() && !suc.empty() && pre.top()->val == suc.top()->val)
            getNextSucc(suc);
        
        vector<int> res;
        for(;k>0;k--){
            if(suc.empty())
                res.push_back(getNextPredecessor(pre));
            else if(pre.empty())
                res.push_back(getNextSucessor(suc));
            else{
                double pre_diff= abs((float) pre.top()->val-target);
                double suc_diff= abs((float) suc.top()->val-target);
                if(pre_diff<suc_diff)
                    res.push_back(getNextPredecessor(pre));
                else
                    res.push_back(getNextSucessor(suc));
            }
        }
        return res;
    }
};


/*
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Show Company Tags
Show Tags
Show Similar Problems

*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int closestValue(TreeNode root, double target) {
        if(root == null) {
            return 0;
        }
        TreeNode ret = root, node = root;
        while(node!=null) {
            if(Math.abs(ret.val - target) > Math.abs(node.val - target)) {
                ret = node;
            }
            if(node.val < target) {
                node = node.right;
            } else {
                node = node.left;
            }
        }
        return ret.val;
    }
}
