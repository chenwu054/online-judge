/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
*/
public class Solution {
    public int minCut(String s) {
        if(s==null) return 0;
        int n=s.length();
        if(n<2) return 0;
        boolean[][] isPalin= new boolean[n][n];
        for(int len=0;len<n;len++){
            for(int i=0;i<n-len;i++){
                isPalin[i][i+len]=(len==0 || ((len==1||isPalin[i+1][i+len-1]) && s.charAt(i)==s.charAt(i+len)) );
            }
        }
        int[] minCut=new int[n];
        for(int i=0;i<n;i++){
            if(isPalin[0][i]) minCut[i]=0;
            else{
                int cut = n;
                for(int j=0;j<i;j++){
                    if(isPalin[j+1][i]){
                        cut=Math.min(cut,minCut[j]+1);
                    }
                }
                minCut[i]=cut;
            }
        }
        return minCut[n-1];
    }
}
