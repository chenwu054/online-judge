class Solution:
    # @param nums: an integer[]
    # @return: an integer
    def maxProduct(self, nums):
        # write your code here
        n = len(nums)
        if n==0:
            return 0
        if n==1:
            return nums[0]
        maxArray,minArray = [1 for i in range(n)], [1 for i in range(n)]
        maxArray[0]=minArray[0]=nums[0]
        maxNum=nums[0]
        for i in range(1,n):
            maxArray[i]=max(max(maxArray[i-1]*nums[i],nums[i]*minArray[i-1]),nums[i])
            minArray[i]=min(min(maxArray[i-1]*nums[i],nums[i]*minArray[i-1]),nums[i])
            maxNum=max(maxNum,max(maxArray[i],minArray[i]))
        return maxNum

/*
Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.
*/
public class Solution {
  public int maxProduct(int[] A) {
      int maxProd = A[0];
      int i=1;
      int lastMax=A[0],lastMin=A[0];
      while(i<A.length){
          int tempMax = Math.max(Math.max(lastMax*A[i],lastMin*A[i]),A[i]);
          int tempMin = Math.min(Math.min(lastMin*A[i],lastMax*A[i]),A[i]);
          if(tempMax>maxProd)
              maxProd=tempMax;
          lastMax=tempMax;
          lastMin=tempMin;
          i++;
      }
      return maxProd;
  }
}
