/*
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up:
If this function is called many times, how would you optimize it?

Related problem: Reverse Integer
*/
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int m = (n >>> 16) | (n<<16);
        m = ((m & 0xff00ff00) >>> 8) | ((m & 0x00ff00ff)<<8);
        m = ((m & 0xf0f0f0f0) >>> 4) | ((m & 0x0f0f0f0f)<<4);
        m = ((m & 0xcccccccc) >>> 2) | ((m & 0x33333333)<<2);
        m = ((m & 0xaaaaaaaa) >>> 1) | ((m & 0x55555555)<<1);
        return m;
    }
}
