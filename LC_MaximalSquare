/*
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.

*/
public class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix==null || matrix.length==0) return 0;
        int n = matrix.length,m=matrix[0].length;
        int[][] rowMatrix = new int[n][m];
        int[][] colMatrix = new int[n][m];
        int max=0;
        for(int i=0;i<n;i++){
            rowMatrix[i][0]=matrix[i][0]-'0';
            if(matrix[i][0]=='1'){
                max=1;
            }
        }
        for(int j=0;j<m;j++){
            colMatrix[0][j]=matrix[0][j]-'0';
            if(matrix[0][j]=='1'){
                max=1;
            }
        }
        int[][] ma =new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(j!=0){
                    rowMatrix[i][j]=matrix[i][j]=='1'?(1+rowMatrix[i][j-1]):0;
                }
                if(i!=0){
                    colMatrix[i][j]=matrix[i][j]=='1'?(1+colMatrix[i-1][j]):0;
                }
                ma[i][j]=matrix[i][j]-'0';
            }
        }
        
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(ma[i][j]==1){
                    if(ma[i-1][j-1]>0){
                        int last = ma[i-1][j-1];
                        ma[i][j]=Math.min(Math.min(rowMatrix[i][j],colMatrix[i][j]),last+1);
                        max=Math.max(ma[i][j] * ma[i][j], max);
                    }
                }
            }
        }
        return max;
    }
}
