/*
Given an array of integers and a number k, find k non-overlapping subarrays which have the largest sum.

The number in each subarray should be contiguous.

Return the largest sum.

Note
The subarray should contain at least one number
*/
public class Solution {
    /**
     * @param nums: A list of integers
     * @param k: An integer denote to find k non-overlapping subarrays
     * @return: An integer denote the sum of max k non-overlapping subarrays
     */
    public static int maxSubArray(ArrayList<Integer> nums, int k) {
        // write your code
       int n = nums.size();
       int[][] put = new int[k][n];
       int[][] noput=new int[k][n];
       int val = 0;
       put[0][0] = nums.get(0);
       noput[0][0]=Integer.MIN_VALUE;//!!
       for(int i =1;i<n;i++){
           put[0][i]=Math.max(put[0][i-1]+nums.get(i), nums.get(i));
           noput[0][i]=Math.max(put[0][i-1],noput[0][i-1]);
       }
       for(int i=1;i<k;i++){
           put[i][i]=put[i-1][i-1]+nums.get(i);
           noput[i][i]=Integer.MIN_VALUE;//!!NOT put[i-1][i-1];
       }
       for(int i=1;i<k;i++){
            for(int j=i+1;j<n;j++){
                //int max = Math.max(put[i-1][j-1],put[i][j-1]);
                put[i][j]=Math.max(Math.max(put[i-1][j-1],put[i][j-1]),noput[i-1][j-1]) + nums.get(j);
                noput[i][j]=Math.max(put[i][j-1],noput[i][j-1]);
            }
       }
       return Math.max(put[k-1][n-1],noput[k-1][n-1]);
    }
}


