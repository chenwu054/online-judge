/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]
*/

public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>>list = new ArrayList<List<Integer>>();
        List<Integer> l = new ArrayList<Integer>();
        l.add(1);
        int sum=1;
        int last=0;
        while(l.size()>0){
            while(l.size()<k && l.get(l.size()-1)<9 && n-sum >= l.get(l.size()-1)){
                l.add(l.get(l.size()-1)+1);
                sum+=l.get(l.size()-1);
            }
            if(sum==n && l.size()==k){
                list.add(new ArrayList<Integer>(l));
            }
            //
            while(l.size()> 0 && (9-(k-l.size())==l.get(l.size()-1))){
                last=l.remove(l.size()-1);
                sum-=last;
            }
            if(l.size()==0){
                break;
            }
            last=l.remove(l.size()-1);
            l.add(last+1);
            sum+=1;
        }
        return list;
    }
    
public class Solution {
    
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>>list = new ArrayList<List<Integer>>();
        List<Integer> l = new ArrayList<Integer>();
        
        combine(1,n,k,l,list);
        return list;
    }
    public void combine(int start,int left, int num, List<Integer> list, List<List<Integer>>ret){
        if(left==0 && num==0){
            ret.add(new ArrayList<Integer>(list));
            return;
        }
        if(num<=0){
            return;
        }
        list.add(start);
        for(int i=start;i<=9;i++){
            if(i>left){
                break;
            }
            list.set(list.size()-1,i);
            combine(i+1,left-i,num-1,list,ret);
        }
        list.remove(list.size()-1);
    }
}
