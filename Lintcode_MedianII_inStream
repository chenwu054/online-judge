/*
  Hard Median II Show Result My Submissions

24% Accepted
Numbers keep coming, return the median of numbers at every time a new number added.

Example
For numbers coming list: [1, 2, 3, 4, 5], return [1, 1, 2, 2, 3]

For numbers coming list: [4, 5, 1, 3, 2, 6, 0], return [4, 4, 4, 3, 3, 3, 3]

For numbers coming list: [2, 20, 100], return [2, 2, 20]

Challenge
O(nlogn) time

Clarification
What's the definition of Median?

Median is the number that in the middle of a sorted array. If there are n numbers in a sorted array A, the median is A[(n-1)/2].
For example, if A=[1,2,3], median is 2. If A=[1,19], median is 1.
*/

public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        int n = nums.length;
        int[] ret = new int[n];
        PriorityQueue<Integer> minQ = new PriorityQueue<Integer>(n/2+1);
        PriorityQueue<Integer> maxQ = new PriorityQueue<Integer>(n/2+1,new Comparator<Integer>(){

            public int compare(Integer a, Integer b){
                return b-a;
            }
        });
        
        int min = 0,max=0;
        for(int i=0;i<n;i++){
            if(minQ.size()==0 && maxQ.size()==0){
                minQ.add(nums[i]);
                ret[i]=nums[i];
            }
            else if(maxQ.size()==0){
                int cur = minQ.peek();
                if(cur<nums[i]){
                    cur = minQ.poll();
                    minQ.add(nums[i]);
                    maxQ.add(cur);
                }
                else{
                    maxQ.add(nums[i]);
                }
                ret[i]=maxQ.peek();
            }
            else{
                min=maxQ.peek();
                max=minQ.peek();
                
                if(nums[i]>max){
                    minQ.add(nums[i]);
                    if(minQ.size()-maxQ.size()>0){
                        maxQ.add(minQ.poll());
                    }
                }
                else{
                    maxQ.add(nums[i]);
                    if(maxQ.size()-minQ.size()>1){
                        minQ.add(maxQ.poll());
                    }
                }
                ret[i]=maxQ.peek();
            }
        }
        
        return ret;
    }
    
}
