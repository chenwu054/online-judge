/*
  Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.
*/
public class Solution {
    private boolean valid(char[][] board,int row, int col){
        boolean[] used = new boolean[9];
        for(int i=0;i<board.length;i++){
            if(board[row][i]!='.'){
                if(used[board[row][i]-'1'])
                    return false;
                used[board[row][i]-'1']=true;
            }
        }
        Arrays.fill(used,false);
        for(int i=0;i<board[0].length;i++){
            if(board[i][col]!='.'){
                if(used[board[i][col]-'1'])
                    return false;
                used[board[i][col]-'1']=true;
            }
        }
        Arrays.fill(used,false);
        row=row/3*3;
        col=col/3*3;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board[row+i][col+j]!='.'){
                    if(used[board[row+i][col+j]-'1'])
                        return false;
                    used[board[row+i][col+j]-'1']=true;
                }
            }
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]!='.'){
                    if(!valid(board,i,j))
                        return false;
                }
            }
        }
        return true;
    }
}
