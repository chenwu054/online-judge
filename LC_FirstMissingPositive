class Solution:
    # @param A, a list of integers
    # @return an integer
    def swap(self,a,i,j):
        temp = a[i]
        a[i]=a[j]
        a[j]=temp
        
    def firstMissingPositive(self, a):
        # write your code here
        if a==None or len(a)==0:
            return 1
        i=0
        while i<len(a):
        //condition: index + 1 == value
        //constraint: in range (0,len(a)] and current is incorrect and the correspondent is incorrect either!!
            while a[i]>0 and a[i]<=len(a) and a[i]!=i+1 and a[a[i]-1]!=a[i]:
                self.swap(a,i,a[i]-1)
            i+=1
        for i in range(len(a)):
            if a[i]!=i+1:
                return i+1
        return len(a)+1


public class Solution {
    public int firstMissingPositive(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 1;
        }
        int i = 0;
        while(i < nums.length) {
            while(nums[i] != i + 1 && nums[i] > 0 && nums[i] <= nums.length && nums[nums[i] - 1] != nums[i]) {
                swap(nums, i, nums[i] - 1);
            }
            i++;
        }

        for(i = 0; i < nums.length; i++) {
            if(nums[i] != i + 1) {
                return i+1;
            }
        }
        return nums.length + 1;
    }
    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}

/*
  Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space.
*/
public class Solution {
    public void swap(int[] a,int i,int j){
        int temp = a[i];
        a[i]=a[j];
        a[j]=temp;
    }
    public int firstMissingPositive(int[] a) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(a==null)
            return 1;
        int i=0;
        while(i<a.length){
            int j=i;
            while(a[j]!=j+1&& a[j]>0 && a[j]<=a.length && a[a[j]-1]!=a[j])
                swap(a,j,a[j]-1);
            i++;
        }
        for(i=0;i<a.length;i++){
            if(a[i]!=i+1)
                return i+1;
        }
        return a.length+1;
    }
}
