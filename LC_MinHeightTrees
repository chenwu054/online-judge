public class Solution {
    /*
    1. find leaf node
    2. find the longest path from the leaf node
    3. get the mid items 
    
    */
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ret = new ArrayList<Integer>();
        if(n == 0) {
            return ret;
        } else if(n==1) {
            ret.add(0);
            return ret;
        }
        Map<Integer, Set<Integer>> graph = new HashMap<Integer, Set<Integer>>();
        for(int i = 0; i< edges.length; i++) {
            int[] a = edges[i];
            if(!graph.containsKey(a[0])) {
                graph.put(a[0], new HashSet<Integer>());
            }
            if(!graph.containsKey(a[1])) {
                graph.put(a[1], new HashSet<Integer>());
            }
            graph.get(a[0]).add(a[1]);
            graph.get(a[1]).add(a[0]);
        }
        int[] p = new int[n];
        int[] last = new int[1];
        bfs(0, graph, p, last);
        int first = last[0];
        int l = bfs(first, graph, p, last);
        if(l % 2 == 0) {
            ret.add(fillKthNode(last[0], l/2, p));
        } 
        ret.add(fillKthNode(last[0], l/2+1, p));
        return ret;
    }
    private int fillKthNode(int start, int k, int[] p) {
        while(k > 1) {
            start = p[start];
            k--;
        }
        return start;
    }
    public int bfs(int start, Map<Integer, Set<Integer>> graph, int[] p, int[] last) {
        Queue<Integer> q = new LinkedList<Integer>();
        Queue<Integer> next = new LinkedList<Integer>();
        Queue<Integer> temp;
        q.add(start);
        int l = 0;
        p[start] = start;
        Set<Integer> visited = new HashSet<Integer>();
        visited.add(start);
        while(!q.isEmpty()) {
            while(!q.isEmpty()) {
                int cur = q.poll();
                last[0] = cur;
                Set<Integer> neighbor = graph.get(cur);
                for(Integer n : neighbor) {
                    if(!visited.contains(n)) {
                        visited.add(n);
                        next.add(n);
                        p[n] = cur;
                    }
                }
            }    
            l++;
            temp = q;
            q = next;
            next= temp;
        }
        return l;
    }
}

/*
For a undirected graph with tree characteristics, we can choose any node as the root. 
The result graph is then a rooted tree. 
Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). 
Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. 
You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. 
Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]

Solution: BFS and ANY path from a leaf to a leaf must go through the root
1. Start from any node and find a leaf node
2. Start from the leaf node and find the longestPath AND set the predecessor and the number of nodes on the path
3. Use fast/slow pointers to find the middle point and test if path is even number. If so, add the predecessor.
*/
public class Solution {
    public static List<Integer> findMinHeightTrees(int n, int[][] edges) {
	    List<Integer> ret = new ArrayList<Integer>();
	    if(n < 2) {
	        ret.add(0);
	        return ret;
	    }
	    Map<Integer,Set<Integer>> graph = new HashMap<Integer, Set<Integer>>();
	    for(int[] edge : edges) {
	        if(!graph.containsKey(edge[0])) {
	            graph.put(edge[0], new HashSet<Integer>());
	        }
	        graph.get(edge[0]).add(edge[1]);
	        if(!graph.containsKey(edge[1])) {
	            graph.put(edge[1], new HashSet<Integer>());
	        }
	        graph.get(edge[1]).add(edge[0]);
	    }
	    int[] predecessor = new int[n];
	    int[] nodes = {0};
	    int deepestNode = findDeepestNode(0, graph, null, null);
	    predecessor[deepestNode] = -1;
	    int node = findDeepestNode(deepestNode, graph, predecessor, nodes);
	    int fast = node, slow = node, dist = 0;
	    while(predecessor[fast] != -1) {
	    	fast = predecessor[fast];
	    	if(predecessor[fast] == -1) {
	    		break;
	    	}
	    	fast = predecessor[fast];
	    	slow = predecessor[slow];
	    }
	    ret.add(slow);
	    if(nodes[0] % 2 == 0) {
	    	ret.add(predecessor[slow]);
	    }
	    return ret;
	}
	public static int findDeepestNode(int start, Map<Integer, Set<Integer>> graph, int[] predecessor, int[] nodes) {
		int ret = start;
        Set<Integer> visited = new HashSet<Integer>();
        visited.add(start);
        Queue<Integer> q = new LinkedList<Integer>();
        Queue<Integer> next = new LinkedList<Integer>();
        Queue<Integer> temp;
        q.add(start);
        int dist = 0;
        while(!q.isEmpty()) {
            while(!q.isEmpty()) {
                Integer cur = q.poll();
                for(Integer neighbor : graph.get(cur)) {
                    if(!visited.contains(neighbor)) {
                    	if(predecessor != null) {
                    		predecessor[neighbor] = cur;
                    	}
                        visited.add(neighbor);
                        next.add(neighbor);
                        ret = neighbor;
                    }
                }
            }
            dist++;
            temp = q;
            q = next;
            next = temp;
        }
        if(nodes != null) {
        	nodes[0] = dist;
        }
        return ret;
	}
}
