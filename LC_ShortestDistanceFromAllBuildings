/*
You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.
*/
public class Solution {
    class Step{
        int x, y, s, p;
        public Step(int x, int y, int s, int p) {
            this.x = x;
            this.y=y;
            this.s = s;
            this.p =p;
        }
    }
    public int shortestDistance(int[][] grid) {
        if(grid == null ||  grid.length == 0) {
            return -1;
        }
        int n = grid.length, m = grid[0].length;
        List<Integer> src = findSources(grid, n, m);
        Map<Integer, Map<Integer, Integer>> v = new HashMap<Integer, Map<Integer, Integer>>();
        Queue<Step> q = new LinkedList<Step>();
        for(int i = 0;i < src.size(); i++) {
            int a = src.get(i);
            q.add(new Step(a/m, a%m, i, 0));
            if(!v.containsKey(a)) {
                v.put(a, new HashMap<Integer, Integer>());
            }
            v.get(a).put(i, 0);;
        }
        int idx = -1, count = src.size();
        while(!q.isEmpty()) {
            Step s = q.poll();
            int l = s.x * m + s.y;
            if(v.get(l).size() == count && grid[s.x][s.y] == 0) {
                idx = l;
                break;
            }
            List<Step> next = findNext(grid, s, v, n, m);
            q.addAll(next);
        }
        if(idx >= 0) {
            Map<Integer, Integer> map = v.get(idx);
            int sum = 0;
            for(Integer val:map.values()) {
                sum += val;
            }
            return sum;
        }
        return -1;
    }
    private List<Step> findNext(int[][] g, Step s, Map<Integer, Map<Integer, Integer>> v, int n, int m) {
        List<Step> ret = new ArrayList<Step>();
        int l = (s.x-1) * m + s.y;
        if(s.x>0 && g[s.x-1][s.y] == 0) {
            l = (s.x-1) * m + s.y;
            Step a = addStep(l, v, s.s, s.x-1, s.y, s.p+1);
            if(a!=null) {
                ret.add(a);
            }
        }
        
        if(s.x < n-1 && g[s.x+1][s.y] ==0){
            l = (s.x + 1) * m + s.y;
            Step a = addStep(l, v, s.s, s.x+1, s.y, s.p+1);
            if(a!=null) {
                ret.add(a);
            }
        }
        
        if(s.y >0 && g[s.x][s.y-1] == 0) {
            l = s.x * m + s.y -1;
            Step a = addStep(l, v, s.s, s.x, s.y -1, s.p+1);
            if(a!=null) {
                ret.add(a);
            }
        }
        
        if(s.y <m-1 && g[s.x][s.y+1] ==0) {
            l = s.x*m + s.y+1;
            Step a = addStep(l, v, s.s, s.x, s.y +1, s.p+1);
            if(a!=null) {
                ret.add(a);
            }
        }
        return ret;
    }
    private Step addStep(int l, Map<Integer, Map<Integer, Integer>>v, int src, int x, int y, int p) {
        Step ret = null;
        if(!v.containsKey(l) || !v.get(l).containsKey(src)) {
            ret =new Step(x, y, src, p);
            if(!v.containsKey(l)) {
                v.put(l, new HashMap<Integer, Integer>());
            }
            v.get(l).put(src, p);
        }
        return ret;
    }
    List<Integer> findSources(int[][] g, int n, int m) {
        List<Integer> ret = new ArrayList<Integer>();
        for(int i =0;i<n;i++) {
            for(int j =0;j<m;j++) {
                if(g[i][j] == 1) {
                    ret.add(i*m + j);
                }
            }
        }
        return ret;
    }
    
}
