/*
Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

For example:
Given n = 13,
Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.
solution:
from the least significant digit to the most significant.
for the current digit, there are 3 sources of 1's 
1. current is 1, then add all the less significant numbers from xxx1ooo to xxx1xxx: n%(current digit) + 1 
2. current is >1, then add all the less significant numbers
3. number of occurrance (current n/10) * how many ones for each occurrance (pow(10,current digit))

*/
public class Solution {
    public int countDigitOne(int n) {
        if(n==0) return 0 ;
        int tot=0;
        int digit=1,q=0,less=0,bak=n;
        while(n > 0){
            q=n%10;
            if(q==1){
                tot+=less+1;
            }
            else if(q>1){
                tot+=digit;
            }
            tot += n/10 * digit;
            digit*=10;
            less=bak%digit;
            n=n/10;
        }
        
        return tot;
    }
}
