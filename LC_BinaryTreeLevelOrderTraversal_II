/*
  Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7]
  [9,20],
  [3],
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        if(root==null) return ret;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Queue<TreeNode> next =new LinkedList<TreeNode>();
        Queue<TreeNode> temp= null;
        q.offer(root);
        while(q.size()>0){
            ArrayList<Integer> row= new ArrayList<Integer>();
            while(q.size()>0){
                TreeNode cur = q.poll();
                row.add(cur.val);
                if(cur.left!=null) next.offer(cur.left);
                if(cur.right!=null) next.offer(cur.right);
            }
            ret.add(row);
            temp = q;
            q=next;
            next=temp;
        }
        ArrayList<Integer> t = null;
        for(int i=0;i<ret.size()/2;i++){
            t=ret.get(i);
            ret.set(i,ret.get(ret.size()-1-i));
            ret.set(ret.size()-1-i,t);
        }
        return ret;
    }
}
