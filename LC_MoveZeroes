/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    if(nums === null || nums.length < 2) {
        return;
    }
    // i is the left most zero, j is the first non-zero after i
    var i=0, j=0, n=nums.length;
    while(j < n && i < n) {
        while(i < n && nums[i]!==0) {
            i++;
        }
        j = Math.max(j+1, i+1);
        while(j < n && nums[j]===0) {
            j++;
        }
        if(i < n && j < n) { // must ensure valid indices when mutating an array!!
            swap(nums,i,j);    
        }
        i+=1;
    }
};
function swap(arr, i, j) {
    var temp = arr[i];
    arr[i]=arr[j];
    arr[j]=temp;
}

/*
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.
*/
public class Solution {
    public void moveZeroes(int[] nums) {
        if(nums == null || nums.length == 0) {
            return;
        }
        int n = nums.length;
        int zp = 0, nzp = 0;
        while(zp < n && nzp < n) {
            while(zp < n && nums[zp] != 0) {
                zp++;
            }
            nzp = Math.max(nzp, zp + 1);
            while(nzp < n && nums[nzp] == 0) {
                nzp++;
            }
            if(zp < n && nzp < n) {
                swap(nums, zp++, nzp++);
            }
        }
    }
    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}
