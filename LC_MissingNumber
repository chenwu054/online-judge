/*
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
*/
public class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        if(n == 0) {
            return 0;  
        }
        int i = 0;
        // invarient => nums[index] == index
        while(i < n) {
            while(nums[i] >= 0 && nums[i] < n && nums[i] != i && nums[nums[i]] != nums[i]) {
                int temp = nums[nums[i]];
                nums[nums[i]] = nums[i];
                nums[i] = temp;
            }
            i++;
        }
        for(i=0; i < n; i++){
            if(i != nums[i]) {
                return i;
            }
        }
        return n;
    }
}
