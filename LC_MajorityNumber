/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

*/
public class Solution {
  public int majorityElement(int[] num) {
    if(num.length<2) return num[0];
    int size = 2; // the majority size
    HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    int i=0;
    while(i<num.length){
      if(map.containsKey(num[i])){
        map.put(num[i],map.get(num[i])+1);
      }
      else{
        map.put(num[i],1);
      }
      if(map.size()==size){
        Iterator<Map.Entry<Integer,Integer>> it = map.entrySet().iterator();
        while(it.hasNext()){
          Map.Entry<Integer,Integer> entry = it.next();
          int newNum = entry.getValue();
          if(newNum == 1)
            it.remove();
          else
            map.put(entry.getKey(),newNum-1);
        }
      }
      i++;
    }
    int maxNum = 0, key = 0;
    for(Integer k : map.keySet()){
      if(map.get(k)>maxNum){
        maxNum = map.get(k);
        key = k;
      }
    }
    return key;
  }
}
