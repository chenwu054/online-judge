/*
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

*/
public class Solution {
    class TrieNode{
        boolean isWord;
        TrieNode[] next;
        public TrieNode(){
            this.isWord=false;
            next=new TrieNode[26];
        }
    }
    TrieNode root=new TrieNode();
    public void addWord(String word){
        if(word==null||word.length()==0) return;
        TrieNode node=root;
        int i=0;
        while(i<word.length()){
            char ch = word.charAt(i);
            if(node.next[ch-'a']==null){
                node.next[ch-'a']=new TrieNode();
            }
            node=node.next[ch-'a'];
            i++;
        }
        node.isWord=true;
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> ret = new ArrayList<String>();
        if(board==null||board.length==0||words==null||words.length==0) return ret;
        for(int i=0;i<words.length;i++){
            addWord(words[i]);
        }
        Set<String> set = new HashSet<String>();
        boolean[][] used=new boolean[board.length][board[0].length];
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                findword(board,i,j,used,root,set,sb);
            }
        }
        for(String str : set){
            ret.add(str);
        }
        return ret;
    }
    public void findword(char[][] board,int i,int j,boolean[][] used,TrieNode root,Set<String> ret,StringBuilder sb){
        if(i<0 || j<0 || i>=board.length || j>=board[0].length || used[i][j]) return;
        // if(root.isWord){
        //     ret.add(sb.toString());
        // }
        char c = board[i][j];
        if(root.next[c-'a']!=null){
            used[i][j]=true;
            TrieNode next = root.next[c-'a'];
            sb.append(c);
            /*test if it is word in here for the cases of 1 letter string.
            */
            if(next.isWord){
                ret.add(sb.toString());
            }
            findword(board,i-1,j,used,next,ret,sb);
            findword(board,i+1,j,used,next,ret,sb);
            findword(board,i,j-1,used,next,ret,sb);
            findword(board,i,j+1,used,next,ret,sb);
            sb.deleteCharAt(sb.length()-1);
            used[i][j]=false;
        }
    }
}
=======
class TrieNode:
    def __init__(self):
        self.next_nodes=[None for i in range(26)]
        self.is_word=False
        return None
        
class Solution:
    
    def insert(self, root, word, index):
        if index==len(word):
            root.is_word=True
            return 
        if root.next_nodes[ord(word[index])-ord('a')] == None:
            root.next_nodes[ord(word[index])-ord('a')] = TrieNode()
        self.insert(root.next_nodes[ord(word[index])-ord('a')], word, index+1)
        
    def query(self, root, word, index):
        if index==len(word):
            return True
        if root.next_nodes[ord(word[index])-ord('a')]==None:
            return False
        return self.query(root.next_nodes[ord(word[index]) - ord('a')], word, index+1)
    
    def is_valid(self, board, i, j):
        return i>=0 and j>=0 and i<len(board) and j<len(board[0])
    idx = [[0, 1], [0, -1], [1, 0] ,[-1, 0]]
    def find(self, board, visited, i, j, root, word, res):
        if visited[i][j]:
            return
        next_char = board[i][j]
        index = ord(next_char) - ord('a')
        if root.next_nodes[index] == None:
            return 
        if root.next_nodes[index].is_word:
            res.add(word+next_char)
        visited[i][j] = True
        for row in self.idx:
            if self.is_valid(board, i+row[0], j+row[1]) and not visited[i+row[0]][j+row[1]]:
                self.find(board, visited, i+row[0], j+row[1], root.next_nodes[index], word + next_char, res)
        visited[i][j] = False
        
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        if board==None or len(board)==0:
            return []
        root = TrieNode()
        for word in words: 
            self.insert(root, word, 0)
        res=set()
        n,m = len(board), len(board[0])
        visited = [[False for j in range(m)] for i in range(n)]
        for i in range(n):
            for j in range(m):
                self.find(board, visited, i, j,root, "", res)
        ret = []
        for w in res:
            ret.append(w)
        return ret
        
