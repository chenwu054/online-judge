/*
Given an array of integers, how many three numbers can be found in the array, so that we can build an triangle whose three edges length is the three numbers that we find?
Have you met this question in a real interview?
Example

Given array S = [3,4,6,7], return 3. They are:

[3,4,6]
[3,6,7]
[4,6,7]

Given array S = [4,4,4,4], return 4. They are:

[4(1),4(2),4(3)]
[4(1),4(2),4(4)]
[4(1),4(3),4(4)]
[4(2),4(3),4(4)]

This problem has to be O(n^3) because in the worse case where n elements of the same value, it has O(N^3) solutions.
So, it has to take at least O(N^3) time.
*/
public class Solution {
    /**
     * @param S: A list of integers
     * @return: An integer
     */
    public int triangleCount(int s[]) {
        // write your code here
        if(s==null || s.length<3){
            return 0;
        }
        Arrays.sort(s);
        int ret=0;
        for(int i=0;i<s.length-2;i++){
            for(int j=i+1;j<s.length-1;j++){
                for(int k=j+1;k<s.length;k++){
                    if(s[i]+s[j]<=s[k]){
                        break;
                    }
                    ret++;
                }
            }
        }
        return ret;
    }
}

