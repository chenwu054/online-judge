/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    static class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval a, Interval b){
            return a.start-b.start;
        }
    }
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        if(intervals==null||intervals.size()<2) return intervals;
        Collections.sort(intervals,new IntervalComparator());
        ArrayList<Interval> ret = new ArrayList<Interval>();
        ret.add(intervals.get(0));
        for(int i=1;i<intervals.size();i++){
            Interval next = intervals.get(i);
            Interval cur = ret.get(ret.size()-1);
            if(next.start>cur.end){
                ret.add(next);
            }
            else{
                cur.end=Math.max(cur.end,next.end);
            }
        }
        return ret;
    }
}
