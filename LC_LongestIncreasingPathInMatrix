public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix==null || matrix.length==0) {
            return 0;
        }
        int n = matrix.length, m = matrix[0].length;
        int[][] v = new int[n][m];
        int max =0;
        for(int i =0;i<n;i++) {
            for(int j =0;j<m;j++) {
                int l =dfs(matrix, v, i, j, n, m);
                max = Math.max(max, l);
            }
        }
        return max;
    }
    boolean valid(int i, int j, int n, int m) {
        if(i<0||j<0||i>=n||j>=m) {
            return false;
        }
        return true;
    }
    int[][] k = {{-1,0},{1,0},{0,1},{0,-1}};
    int dfs(int[][] a, int[][] v, int i, int j, int n, int m) {
        if(v[i][j]>0) {
            return v[i][j];
        }
        int max = 0;
        for(int s = 0;s<k.length;s++) {
            int[] b = k[s];
            int x = i+b[0];
            int y = j+b[1];
            if(valid(x,y,n,m) && a[x][y] > a[i][j]) {
                int l = dfs(a,v,x,y,n,m);
                if(l>max) {
                    max=l;
                }
            }
        } 
        v[i][j]=max+1;
        return v[i][j];
    }
}

/*
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*/
public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0) {
            return 0;
        }
        int n =matrix.length, m = matrix[0].length, max = 0;
        boolean[][] v = new boolean[n][m];
        int[][] dp = new int[n][m];
        for(int i =0;i<n;i++) {
            for(int j =0;j<m;j++) {
                if(!v[i][j]) {
                    int ret = dfs(matrix,v, dp, i, j);
                    if(ret > max) {
                        max = ret;
                    }
                }
            }
        }
        return max;
    }
    int[][] k = {{1,0},{0,1},{-1,0},{0,-1}};
    boolean inRange(int[][] matrix, int i, int j) {
        if(i < 0 || j<0 || i>=matrix.length || j>=matrix[0].length) {
            return false;
        }
        return true;
    }
    int dfs(int[][] matrix, boolean[][] v, int[][] dp, int i, int j) {
        if(v[i][j]) {
            return dp[i][j];
        }
        int max = 1;
        for(int s=0;s<k.length;s++) {
            int x = i+k[s][0];
            int y = j+k[s][1];
            if(inRange(matrix, x, y) && matrix[x][y] > matrix[i][j]) {
                int len = dfs(matrix, v, dp, x, y);
                if(len + 1 > max) {
                    max = len + 1;
                }
            }
        }
        v[i][j] = true;
        dp[i][j] = max;
        return max;
    }
}
