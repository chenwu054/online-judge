def threeSum(numbers):
    # write your code here
    numbers.sort()
    ret=[]
    i=0
    while i < len(numbers) :
        j=i+1
        k=len(numbers)-1
        while j<k :
            sum = numbers[i] + numbers[j] + numbers[k]
            if sum > 0:
                k=k-1
                while (j<k and numbers[k]==numbers[k+1]):
                    k=k-1
                continue
            elif sum == 0:
                list = [numbers[i], numbers[j], numbers[k]];
                ret.append(list);
  
            j=j+1
            while j<k and numbers[j]==numbers[j-1]:
                j=j+1
        i+=1
        while(i<len(numbers) and numbers[i]==numbers[i-1]):
            i+=1
    return ret;

/*
  Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
*/
public class Solution {
    public ArrayList<ArrayList<Integer>> threeSum(int[] num) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        if(num==null || num.length<3)
            return ret;
        Arrays.sort(num);
        int i=0,j=0,k=0;
        while(i<num.length-2){
            j=i+1;k=num.length-1;
            while(j<k){
                int sum = num[i]+num[j]+num[k];
                if(sum==0){
                    ArrayList<Integer> arr =new ArrayList<Integer>();
                    arr.add(num[i]);
                    arr.add(num[j]);
                    arr.add(num[k]);
                    ret.add(arr);
                }
                else if(sum>0){
                    k--;
                    while(j<k&&num[k]==num[k+1]){
                        k--;
                    }
                    continue;
                }
                j++;
                while(j<k && num[j]==num[j-1])
                    j++;
            }
            i++;
            while(i<num.length-2&&num[i]==num[i-1]){
                i++;
            }
        }
        return ret;
    }
}
