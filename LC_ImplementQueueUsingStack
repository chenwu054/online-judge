/*
 Implement the following operations of a queue using stacks.

    push(x) -- Push element x to the back of queue.
    pop() -- Removes the element from in front of queue.
    peek() -- Get the front element.
    empty() -- Return whether the queue is empty.

Notes:

    You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
    Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
    You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

*/
class MyQueue {
    // Push element x to the back of queue.
    Stack<Integer> k1 = new Stack<Integer>();
    Stack<Integer> k2 = new Stack<Integer>();
    public void push(int x) {
        k1.push(new Integer(x));
    }

    // Removes the element from in front of queue.
    public void pop() {
        if(k2.size()>0){
            k2.pop();
            return;
        }
        while(k1.size()>0){
            k2.push(k1.pop());
        }
        k2.pop();
    }

    // Get the front element.
    public int peek() {
        if(k2.size()>0){
            return k2.peek();
        }
        while(k1.size()>0){
            k2.push(k1.pop());
        }
        return k2.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return k1.size()==0 && k2.size()==0;
    }
}
