/*
  Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example
An example:

   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}"
*/
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    public boolean isValidBST(TreeNode root) {
        // write your code here
        if(root==null) return true;
        TreeNode[] last = new TreeNode[1];
        return inorderVerify(root,last);
    }
    public boolean inorderVerify(TreeNode root, TreeNode[] last){
        if(root==null) return true;
        boolean left = root.left==null?true:inorderVerify(root.left,last);
        if(last[0]==null){
            last[0]=root;
            return inorderVerify(root.right,last);
        }
        else if(last[0].val<root.val){
            last[0]=root;
            boolean right = root.right==null?true:inorderVerify(root.right,last);
            return left&&right;
        }
        else
            return false;
    }
}
