/**
 * @param {string[]} words
 * @return {number[][]}
  TIME limit exceeded!
 */
 function isPalin(string) {
	if(string.length === 0) {
		return true;
	}
	var n = string.length;
	for(var i=0; i<n/2; i++) {
		if(string.charAt(i) !== string.charAt(n-i-1)) {
			return false;
		}
	}
	return true;
}
var palindromePairs = function(words) {
    var ret = [];
	if(words === undefined || words.length < 2) {
		return ret;
	}
	var map = {};
	var n = words.length;
	for(var i=0; i<n; i++) {
		map[words[i]] = i;
	}
	for(i=0; i<n; i++) {
		var w = words[i];
		var m = w.length;
		for(var j=0;j<=m; j++) {
			var pref = w.substring(0,j).split('').reverse().join('');
			var suff = w.substring(j);
			var rs = suff.split('').reverse().join('');
			if(map[rs]!==undefined && isPalin(pref) && map[rs]!==i && w.length > words[map[rs]].length) {
				ret.push([map[rs], i]);
			}
			if(map[pref]!==undefined && isPalin(suff) && map[pref]!==i) {
				ret.push([i, map[pref]]);
			}
		}
	}
    return ret;
};



/*
Given a list of unique words. Find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:
Given words = ["bat", "tab", "cat"]
Return [[0, 1], [1, 0]]
The palindromes are ["battab", "tabbat"]
Example 2:
Given words = ["abcd", "dcba", "lls", "s", "sssll"]
Return [[0, 1], [1, 0], [3, 2], [2, 4]]
The palindromes are ["dcbaabcd", "abcddcba", "slls", "llssssll"]
*/
public class Solution {
    private boolean isPalin(String s) {
        if(s.isEmpty()) {
            return true;
        }
        for(int i = 0; i<s.length()/2; i++) {
            if(s.charAt(i) != s.charAt(s.length()-1-i)) {
                return false;
            }
        }
        return true;
    }
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        Map<String, Integer> map = new HashMap<String, Integer>();
        int n = words.length;
        for(int i = 0; i < n; i++) {
            map.put(words[i], i);
        }
        for(int i = 0; i < n; i++) {
            String word = words[i];
            for(int j = 0; j <= word.length(); j++) {
                String reversePrefix =new StringBuilder(word.substring(0, j)).reverse().toString();
                String suffix = word.substring(j);
                String reverseSuffix = new StringBuilder(suffix).reverse().toString();
                if(map.containsKey(reverseSuffix) 
                    && isPalin(reversePrefix) 
                    && map.get(reverseSuffix) != i 
                    // this is for the case: "" "aba", where it is only added once(listed in the next if case)
                    && word.length() > words[map.get(reverseSuffix)].length()) {
                    List<Integer> newList = new ArrayList<Integer>();
                    newList.add(map.get(reverseSuffix));
                    newList.add(i);
                    ret.add(newList);
                }
                if(map.containsKey(reversePrefix) 
                    && isPalin(suffix) 
                    && map.get(reversePrefix) != i ) {
                    List<Integer> newList = new ArrayList<Integer>();
                    newList.add(i);
                    newList.add(map.get(reversePrefix));
                    ret.add(newList);
                }
            }
        }
        
        return ret;
    }
}
