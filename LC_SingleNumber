/*
  Given an array of integers, every element appears twice except for one. Find that single one.

  Note:
  Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

*/
public class Solution {
    public int singleNumber(int[] A) {
        int n=A[0];
        for(int i=1;i<A.length;i++){
            n^=A[i];
        }
        return n;
    }
}

/*
  Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/
public class Solution {
    public int singleNumber(int[] A) {
        int[] num = new int[32];
        for(int i=0;i<A.length;i++){
            for(int j=0;j<32;j++){
                if((A[i]&(1<<j))!=0){
                    num[j]=(num[j]+1)%3;
                }
            }
        }
        int ret=0;
        for(int i=0;i<32;i++){
            if(num[i]>0)
                ret|=(1<<i);
        }
        return ret;
    }
}
