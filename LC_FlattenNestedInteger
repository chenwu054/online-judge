/*
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].

Show Company Tags
Show Tags
Show Similar Problems

*/
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    LinkedList<NestedInteger> l;
    public NestedIterator(List<NestedInteger> nestedList) {
        l = new LinkedList<>();
        for(NestedInteger ni : nestedList) {
            if(ni!=null) {
                if(ni.isInteger() || !ni.getList().isEmpty()) {
                    l.add(ni);
                } 
            }
        }
        update();
    }
    private void update() {
        Stack<NestedInteger> k = new Stack<>();
        while(!l.isEmpty() && !l.peekFirst().isInteger()) {
            List<NestedInteger> ll = l.pollFirst().getList();
            for(NestedInteger ni : ll) {
                if(ni.isInteger() || !ni.getList().isEmpty()) {
                    k.push(ni);
                }
            }
            while(!k.isEmpty()) {
                l.offerFirst(k.pop());
            }
        }
    }
    @Override
    public Integer next() {
        if(!hasNext()) {
            return null;
        }
        Integer ret = l.pollFirst().getInteger();
        update();
        return ret;
    }

    @Override
    public boolean hasNext() {
        return !l.isEmpty();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
