/*
Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
"3456237490", 9191 -> []
*/
public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> ret = new ArrayList<>();
        dfs(ret, num, new StringBuilder(), 0, target, 0,0);
        return ret;
    }
    void dfs(List<String> ret, String num, StringBuilder sb, int start, int target, long prev, long product) {
        if(start == num.length()) {
            if(prev == target) {
                ret.add(sb.toString());
            }
            return;
        }
        int len = sb.length();
        for(int i = start; i<num.length();i++) {
            if(i != start && num.charAt(start) == '0') break;
            long n = Long.parseLong(num.substring(start, i+1));
            if(start == 0) {
                sb.setLength(len);
                dfs(ret, num, sb.append(n), i+1, target, n, n);
            } else {
                sb.setLength(len);
                dfs(ret, num, sb.append('+').append(n), i+1, target, prev+n, n);
                sb.setLength(len);
                dfs(ret, num, sb.append('-').append(n), i+1, target, prev-n, -n);
                sb.setLength(len);
                dfs(ret, num, sb.append('*').append(n), i+1, target, prev - product + n * product, n * product);
            }
        }
    
    }
}
