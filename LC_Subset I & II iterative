class Solution:
    """
    @param S: The set of numbers.
    @return: A list of lists. See example.
    """
    def subsets(self, s):
        # write your code here
        ret = []
        ret.append([])
        if s==None or len(s)==0:
            return ret
        s.sort()
        for c in s:
            l = len(ret)
            for i in range(l):
                newList = ret[i][:]
                newList.append(c)
                ret.append(newList)
        return ret


/*

  Given a collection of integers that might contain duplicates, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
*/
public static ArrayList<ArrayList<Integer>> subsets(int[] num) {
    // Note: The Solution object is instantiated only once and is reused by each test case.
    ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
    if(num==null||num.length==0)
        return ret;
    ret.add(new ArrayList<Integer>());
    Arrays.sort(num);
    for(int i=0;i<num.length;i++){
        int length=ret.size();
        for(int j=0;j<length;j++){
            ret.add(new ArrayList<Integer>(ret.get(j)));
            ret.get(length+j).add(num[i]);       
        }
    }
    return ret;
}
public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
    ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
    int len=0,lastLen=0;
    ret.add(new ArrayList<Integer>());
    Arrays.sort(num);
    for(int i=0;i<num.length;i++){
        len=ret.size();
        int j=(i>0&&num[i-1]==num[i])?lastLen:0;
        for(;j<len;j++){
            ArrayList<Integer> newArr= new ArrayList<Integer>(ret.get(j));
            newArr.add(num[i]);
            ret.add(newArr);
        }
        lastLen=len;
    }
    return ret;
}
