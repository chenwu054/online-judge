/*
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
Hint:

You should make use of what you have produced already.
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.
Or does the odd/even status of the number help you in calculating the number of 1s?
Solution: 
every time 2^i, it addes a new 1 to the binary representation.

*/
public class Solution {
    public int[] countBits(int num) {
        int[] ret = new int[num + 1];
        if(num== 0) {
            return ret;
        }
        ret[1] = 1;
        if(num==1) {
            return ret;
        }
        long l = 2;
        while(l <= num) {
            for(int j = 0; j<l && j+l <= num; j++) {
                ret[j+(int)l] = ret[j] + 1;
            }
            l = l<<1;
        }
        return ret;
    }
}
