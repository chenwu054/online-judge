/*
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
*/
public class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms == null || rooms.length == 0) {
            return;
        }
        int n = rooms.length, m = rooms[0].length;
        boolean[][] v = new boolean[n][m];
        for(int i =0;i<n;i++) {
            for(int j = 0;j<m;j++) {
                if(rooms[i][j] == 0) {
                    bfs(rooms, v, i, j);
                    for(int s = 0; s<n;s++) {
                        Arrays.fill(v[s], false);
                    }
                }
            }
        }
    }
    private void bfs(int[][]r, boolean[][] v, int i, int j) {
        int l = 0, n = r.length, m = r[0].length;
        Queue<Integer> q = new LinkedList<Integer>();
        Queue<Integer> p = new LinkedList<Integer>();
        Queue<Integer> t =null;
        q.add(i*m + j);
        v[i][j] = true;
        while(!q.isEmpty()) {
            while(!q.isEmpty()) {
                Integer cur = q.poll();
                r[cur/m][cur%m] = Math.min(r[cur/m][cur%m], l);
                List<Integer> next = getNext(r, v, cur/m, cur%m, m);
                p.addAll(next);
            }
            t = q;
            q=p;
            p=t;
            l++;
        }
    }
    int[][] k = {{1,0},{-1,0},{0,1},{0,-1}};
    List<Integer> getNext(int[][] r, boolean[][] v, int i, int j, int m) {
        List<Integer> ret = new ArrayList<Integer>();
        for(int s = 0;s<k.length;s++) {
            int ii = i+k[s][0];
            int jj = j+k[s][1];
            if(ii>=0 && jj>=0 && ii<r.length && jj<m && !v[ii][jj] && r[ii][jj] > 0) {
                v[ii][jj] = true;
                ret.add(ii*m +jj);
            }
        }
        return ret;
    }
    
}
