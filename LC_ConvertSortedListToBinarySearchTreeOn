/*
  Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
  public TreeNode convertBST(int left,ListNode[] last){
      if(left<=0) return null;
      int mid = left/2+1;
      TreeNode leftNode = convertBST(mid-1,last);
      TreeNode root = new TreeNode(last[0].val);
      last[0]=last[0].next;
      TreeNode rightNode =convertBST(left-mid,last);
      root.left=leftNode;
      root.right=rightNode;
      return root;
  }
  public TreeNode sortedListToBST(ListNode head) {
      if(head==null) return null;
      int num = 0;
      ListNode cur = head;
      while(cur!=null){
          num++;
          cur=cur.next;
      }
      ListNode[] last = new ListNode[1];
      last[0]=head;
      return convertBST(num,last);
  }
}
