/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/
public class Solution {
    private boolean valid(int[] a, int start){
        if(start==0) return true;
        for(int i=0;i<start;i++){
            if(a[i]==a[start]) return false;
            if(a[i]+(start-i)==a[start] || a[i]-(start-i)==a[start]) return false;
        }
        return true;
    }
    public void solve(int[] a, int start, ArrayList<String[]> ret,String str){
        int n=a.length;
        if(start==n){
            String[] toAdd=new String[n];
            for(int i=0;i<n;i++){
                StringBuilder sb =new StringBuilder(str);
                sb.setCharAt(a[i],'Q');
                toAdd[i]=sb.toString();
            }
            ret.add(toAdd);
            return;
        }
        for(int i=0;i<n;i++){
            a[start]=i;
            if(valid(a,start)){
                solve(a,start+1,ret,str);
            }
        }
    }
    public ArrayList<String[]> solveNQueens(int n) {
        ArrayList<String[]> ret = new ArrayList<String[]>();
        int[] a = new int[n];
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<n;i++){
            sb.append('.');
        }
        solve(a,0,ret,sb.toString());
        return ret;
    }
}

/*
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.
*/
public class Solution {
    private boolean valid(int[] a, int start){
        if(start==0) return true;
        for(int i=0;i<start;i++){
            if(a[i]==a[start]) return false;
            if(a[i]+(start-i)==a[start] || a[i]-(start-i)==a[start]) return false;
        }
        return true;
    }
    public void solve(int[] a, int start,int[] count){
        int n=a.length;
        if(start==n){
            count[0]++;
            return;
        }
        for(int i=0;i<n;i++){
            a[start]=i;
            if(valid(a,start)){
                solve(a,start+1,count);
            }
        }
    }
    public int totalNQueens(int n) {
        int[] a = new int[n];
        int[] count={0};
        solve(a,0,count);
        return count[0];
    }
}
