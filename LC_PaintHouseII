public class Solution {
    public int minCostII(int[][] costs) {
        if(costs == null || costs.length == 0) {
            return 0;
        }
        int n = costs.length, m=costs[0].length;
        if(m<2) {
            return n==1?costs[0][0]:0;
        }
        int gmin=-1,gmin2=-1;
        int[][] dp = new int[2][m];
        for(int i = 0;i < m;i++) {
            dp[0][i] = costs[0][i];
            if(gmin == -1 || costs[0][i] < costs[0][gmin]) {
                gmin2 = gmin;
                gmin = i;
            } else if(gmin2 == -1 || costs[0][i] < costs[0][gmin2]) {
                gmin2=i;
            }
        }
        for(int i = 1; i< n;i++) {
            int lmin=-1, lmin2=-1;
            for(int j = 0; j< m;j++) {
                int min = gmin;
                if(j == gmin) {
                    min = gmin2;
                }
                dp[i%2][j] = dp[1-(i%2)][min] + costs[i][j];
                if(lmin == -1 || dp[i%2][j] < dp[i%2][lmin]) {
                    lmin2=lmin;
                    lmin = j;
                } else if(lmin2 == -1 || dp[i%2][j] < dp[i%2][lmin2]) {
                    lmin2=j;
                }
            }
            gmin = lmin;
            gmin2=lmin2;
        }
        int min = dp[(n-1)%2][0];
        for(int i = 1;i<m;i++) {
            min = Math.min(min, dp[(n-1)%2][i]);
        }
        return min;
    }
}

/*
There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?

Show Company Tags
Show Tags
Show Similar Problems

*/
public class Solution {
    public int minCostII(int[][] costs) {
        if(costs == null || costs.length == 0) {
            return 0;
        }
        int n = costs.length, m=costs[0].length;
        int[][] dp = new int[2][m];
        for(int i = 0;i < m;i++) {
            dp[0][i] = costs[0][i];
        }
        for(int i = 1; i< n;i++) {
            for(int j = 0; j< m;j++) {
                int min = Integer.MAX_VALUE;
                for(int k = 0;k<m ;k++) {
                    if(k == j) {
                        continue;
                    }
                    min = Math.min(dp[1-(i%2)][k] + costs[i][j], min);
                }
                dp[i%2][j] = min;
            }
        }
        int min = dp[(n-1)%2][0];
        for(int i = 1;i<m;i++) {
            min = Math.min(min, dp[(n-1)%2][i]);
        }
        return min;
    }
}
