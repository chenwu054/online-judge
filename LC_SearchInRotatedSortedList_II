/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.
*/

public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums==null || nums.length<1) return false;
        int start=0,end=nums.length-1;
        int mid=0;
        while(start<=end){
            mid=start+((end-start)>>1);
            if(nums[mid]==target){
                return true;
            }
            else if(nums[mid]<target){
                if(nums[start]==nums[end]){ //make sure there is difference between nums[start] and nums[end]
                    start++;
                }
                else if(nums[start]>nums[mid] && nums[start]<=target){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                if(nums[start]==nums[end]){ //make sure there is difference between nums[start] and nums[end]
                    end--;
                }
                else if(nums[end]<nums[mid] && nums[end]>=target){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }
        }
        return false;
    }
}

public class Solution {
    public boolean recursiveSearch(int[] a, int start, int end, int target){
        if(start>end) return false;
		if(start==end) return a[start]==target;
		int mid = start+(end-start)/2;
		if(a[mid]==target)
			return true;
		else if(a[mid]<target){
			if(a[start]==a[end]){
				return recursiveSearch(a,start+1,end,target);
			}
			else if(a[start]>a[end]&& a[start]>a[mid] && a[start]<=target){
				 return recursiveSearch(a,start,mid-1,target);
			}
			else
				return recursiveSearch(a,mid+1,end,target);
		}
		else{
			if(a[start]==a[end]){
				return recursiveSearch(a,start+1,end,target);
			}
			else if(a[end]<a[start] && a[end]<a[mid] && target<=a[end])
				return recursiveSearch(a,mid+1,end,target);
			else 
				return recursiveSearch(a,start,mid-1,target);
		}
    }
    public boolean search(int[] a, int target) {
        if(a==null||a.length==0) return false;
        
        return recursiveSearch(a,0,a.length-1,target);
    }
}
