/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.
*/
public class Solution {
    public boolean recursiveSearch(int[] a, int start, int end, int target){
        if(start>end) return false;
		if(start==end) return a[start]==target;
		int mid = start+(end-start)/2;
		if(a[mid]==target)
			return true;
		else if(a[mid]<target){
			if(a[start]==a[end]){
				return recursiveSearch(a,start+1,end,target);
			}
			else if(a[start]>a[end]&& a[start]>a[mid] && a[start]<=target){
				 return recursiveSearch(a,start,mid-1,target);
			}
			else
				return recursiveSearch(a,mid+1,end,target);
		}
		else{
			if(a[start]==a[end]){
				return recursiveSearch(a,start+1,end,target);
			}
			else if(a[end]<a[start] && a[end]<a[mid] && target<=a[end])
				return recursiveSearch(a,mid+1,end,target);
			else 
				return recursiveSearch(a,start,mid-1,target);
		}
    }
    public boolean search(int[] a, int target) {
        if(a==null||a.length==0) return false;
        
        return recursiveSearch(a,0,a.length-1,target);
    }
}
