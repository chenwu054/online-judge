/*
  Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/
public class Solution {
    public int evalRPN(String[] tokens) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(tokens==null || tokens.length==0) return 0;
        Stack<Integer> k= new Stack<Integer>();
        Set<Character> op = new HashSet<Character>();
        op.add('+');
        op.add('-');
        op.add('*');
        op.add('/');
        int i=0;
        int a = 0,b=0;
        while(i<tokens.length){
            if(tokens[i].length()>1 || !op.contains(tokens[i].charAt(0))){
                k.push(Integer.parseInt(tokens[i]));
            }
            else{
                b = k.pop();
                a = k.pop();
                char c = tokens[i].charAt(0);
                switch(c){
                    case '+': a+=b;break;
                    case '-': a-=b;break;
                    case '*': a*=b;break;
                    case '/': a/=b;break;
                }
                k.push(a);
            }
            i++;
        }
        return k.pop();
    }
}
