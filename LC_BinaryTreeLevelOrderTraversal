# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    # @param {TreeNode} root
    # @return {integer[][]}
    def levelOrder(self, root):
        if root==None: 
            return []
        q = [root]
        next =[]
        ret =[]
        while len(q)>0:
            list = []
            i=0
            while len(q)>i:
                list.append(q[i].val)
                if q[i].left!=None:
                    next.append(q[i].left)
                if q[i].right!=None:
                    next.append(q[i].right)
                i+=1
            ret.append(list)
            temp = q
            q = next
            next=temp
            next=[]
        return ret
        
        

/*
  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        if(root==null) return ret;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Queue<TreeNode> next =new LinkedList<TreeNode>();
        Queue<TreeNode> temp=null;
        q.offer(root);
        while(q.size()>0){
            ArrayList<Integer> row=new ArrayList<Integer>();
            while(q.size()>0){
                TreeNode cur = q.poll();
                row.add(cur.val);
                if(cur.left!=null)
                    next.offer(cur.left);
                if(cur.right!=null)
                    next.offer(cur.right);
            }
            ret.add(row);
            temp = q;
            q=next;
            next=temp;
        }
        return ret;
    }
}
