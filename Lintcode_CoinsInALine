/*
Medium Coins in a Line Show result 

39% Accepted
There are n coins in a line. Two players take turns to take one or two coins from right side until there are no more coins left. The player who take the last coin wins.

Could you please decide the first play will win or lose?

Have you met this question in a real interview? Yes
Example
n = 1, return true.

n = 2, return true.

n = 3, return false.

n = 4, return true.

n = 5, return true.

Challenge
O(n) time and O(1) memory


*/
public class Solution {
    /**
     * @param n: an integer
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int n) {
        // write your code here
        return n%3!=0;
    }
}

/*
There are n coins with different value in a line. Two players take turns to take one or two coins from left side until there are no more coins left. The player who take the coins with the most value wins.

Could you please decide the first player will win or lose?
Have you met this question in a real interview?
Example

Given values array A = [1,2,2], return true.

Given A = [1,2,4], return false.

*/
public class Solution {
    /**
     * @param values: an array of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        // write your code here
        if(values.length<3){
            return true;
        }
        int n=values.length;
        int[] sum=new int[n];
        int[] max=new int[n];
        sum[n-1]=values[n-1];
        max[n-1]=values[n-1];
        for(int i=n-2;i>=0;i--){
            sum[i]=sum[i+1]+values[i];
        }
        max[n-2]=sum[n-2];
        for(int i=n-3;i>=0;i--){
            max[i]=Math.max(values[i]+sum[i+1]-max[i+1],values[i]+values[i+1]+sum[i+2]-max[i+2]);
        }
        return max[0]>sum[0]-max[0];
    }
}

/*
There are n coins in a line. Two players take turns to take a coin from one of the ends of the line until there are no more coins left. The player with the larger amount of money wins.

Could you please decide the first player will win or lose?
Have you met this question in a real interview?
Example

Given array A = [3,2,2], return true.

Given array A = [1,2,4], return true.

Given array A = [1,20,4], return false.
Challenge

Follow Up Question:

If n is even. Is there any hacky algorithm that can decide whether first player will win or lose in O(1) memory and O(n) time?

*/
public class Solution {
    /**
     * @param values: an array of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        // write your code here
        if(values.length<=1){
            return true;
        }
        int n=values.length;
        int[][] sum=new int[n][n];
        int[][] max=new int[n][n];
        for(int i=0;i<n;i++){
            sum[i][i]=values[i];
            max[i][i]=values[i];
        }
        for(int len=1;len<n;len++){
            for(int i=0;i<n-len;i++){
                sum[i][i+len]=sum[i][i+len-1]+values[i+len];
                max[i][i+len]=Math.max(values[i]+sum[i+1][i+len]-max[i+1][i+len],
                                        values[i+len]+sum[i][i+len-1]-max[i][i+len-1]);
            }
        }
        return max[0][n-1]>sum[0][n-1]-max[0][n-1];
    }
}

