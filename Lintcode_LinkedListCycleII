/*
Hard Linked List Cycle II Show result 

36% Accepted
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Have you met this question in a real interview? Yes
Example
Given -21->10->4->5, tail connects to node index 1，返回10

Challenge
Follow up:
Can you solve it without using extra space?
*/
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: The node where the cycle begins. 
     *           if there is no cycle, return null
     */
    public ListNode detectCycle(ListNode head) {  
        // write your code here
        //test if there is a ring
        if(head==null || head.next==null){
            return null;
        }
        ListNode slow=head,fast=head.next;
        while(fast!=null && slow!=fast){
            slow=slow.next;
            fast=fast.next;
            if(fast==null){
                return null;
            }
            fast=fast.next;
        }
        if(fast==null){
            return null;
        }
        //find the length;
        int len=1;
        fast=fast.next;
        while(fast!=slow){
            fast=fast.next;
            len++;
        }
        //set the separation
        int k=0;
        fast=head;
        slow=head;
        while(k<len){
            fast=fast.next;
            k++;
        }
        while(fast!=slow){
            fast=fast.next;
            slow=slow.next;
        }
        return fast;
    }
}

