/*
use hashmap to prune the visited routes
*/
public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> ret = new ArrayList<>();
        List<List<String>> dp = new ArrayList<List<String>>();
        Map<String, List<String>> v = new HashMap<>();
        return dfs(s, wordDict, v);
    }
    List<String> dfs(String s, Set<String> dict, Map<String,List<String>> v) {
        if(v.containsKey(s)) {
            return v.get(s);
        }
        List<String> ret = new ArrayList<>();
        if(s.length() == 0) {
            ret.add("");
            return ret;
        }
        for(int i = 0;i<s.length();i++) {
            if(dict.contains(s.substring(0,i+1))) {
                List<String> next = dfs(s.substring(i+1), dict, v);
                for(String n : next) {
                    ret.add(s.substring(0,i+1) + (n.length() == 0? "" : " ") + n);
                }
            }
        }
        v.put(s, ret);
        return ret;
    }
    
}



/*
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].

*/
public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> ret = new ArrayList<String>();
        if(s == null || s.length() == 0) {
            return ret;
        }
        int n = s.length();
        boolean[][] valid = new boolean[n][n];
        for(int i = 0; i < n; i++) { // calculate if substring from i to j exists in wordDict
            for(int j = i; j < n; j++) {
                if(wordDict.contains(s.substring(i,j+1))) {
                    valid[i][j]=true;
                }
            }
        }
        ArrayList<ArrayList<Integer>> dp = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < n; i++) {
            dp.add(null);
        }
        for(int i = n - 1; i >= 0; i--) { // store all the valid ending point starting at index i
            for(int j = i; j < n; j++) {
                if(valid[i][j] && (j == n - 1 || dp.get(j + 1) != null)) {
                    if(dp.get(i) == null) { 
                        dp.set(i, new ArrayList<Integer>());
                    }
                    dp.get(i).add(j);
                }
            }
        }
        if(dp.get(0) != null) { // recursively calculate the substring. the starting 0 is not recorded. so last = 0 to start with
            recursiveAppendWords(dp, s, 0, ret, new LinkedList<Integer>());
        }
        return ret;
    }
    
    public void recursiveAppendWords(ArrayList<ArrayList<Integer>> dp, String str, int start, List<String> ret, LinkedList<Integer> k) {
        if(start >= str.length()) {
            int last = 0;
            StringBuilder sb = new StringBuilder();
            for(Integer in : k) {
                sb.append(str.substring(last, in + 1)).append(' ');
                last = in + 1;
            }
            sb.deleteCharAt(sb.length() - 1);
            ret.add(sb.toString());
            return;
        }
        ArrayList<Integer> indices = dp.get(start);
        for(int i = 0; i < dp.get(start).size(); i++) {
            k.add(dp.get(start).get(i));
            recursiveAppendWords(dp, str, dp.get(start).get(i) + 1, ret, k);
            k.removeLast();
        }
    }
}

/*
Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".

*/
public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        if(s == null || s.length() == 0) {
            return false;
        }
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;
        for(int i = 1; i <= n; i++) {
            for(int j = i - 1; j >= 0 ; j--) {
                if(dp[j] && wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}
