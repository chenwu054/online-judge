/*
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
*/
import java.util.Random;
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums==null||nums.length==0) return 0;
        int start=0,end=nums.length-1,pivot=0,pivotPos=0;
        Random r = new Random();
        while(start<end){
            pivotPos=r.nextInt(end-start+1);
            swap(nums,pivotPos+start,start);
            pivot=nums[start];
            int i=start+1,j=end;
            while(i<=j){
                while(i<=j && nums[i]>pivot){
                    nums[i-1]=nums[i++];
                }
                while(i<=j && nums[j]<=pivot){
                    j--;
                }
                if(i<j){
                    swap(nums,i,j);
                }
            }
            nums[j]=pivot;
            if(j+1==k){
                return nums[j];
            }
            else if(j+1<k){
                start=j+1;
            }
            else{
                end=j;
            }
        }
        return nums[start];
    }
    public void swap(int[] a, int i, int j){
        int temp = a[i];
        a[i]=a[j];
        a[j]=temp;
    }
}
