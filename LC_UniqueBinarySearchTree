/*
  Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public ArrayList<TreeNode> generate(int start, int end){
        if(start>end) return null;
        ArrayList<TreeNode> ret = new ArrayList<TreeNode>();
        
        for(int i=start;i<=end;i++){
            ArrayList<TreeNode> left=generate(start,i-1);
            ArrayList<TreeNode> right=generate(i+1,end);
            if(left==null&&right==null){
                TreeNode root=new TreeNode(i);
                ret.add(root);
            }
            else if(left==null){
                for(int j=0;j<right.size();j++){
                    TreeNode root =new TreeNode(i);
                    root.right=right.get(j);
                    ret.add(root);
                }
            }
            else if(right==null){
                for(int j=0;j<left.size();j++){
                    TreeNode root =new TreeNode(i);
                    root.left=left.get(j);
                    ret.add(root);
                }
            }
            else{
                for(int j=0;j<left.size();j++){
                    for(int k=0;k<right.size();k++){
                        TreeNode root = new TreeNode(i);
                        root.left=left.get(j);
                        root.right=right.get(k);
                        ret.add(root);
                    }
                }
            }
        }
        return ret;
    }
    public ArrayList<TreeNode> generateTrees(int n) {
        if(n==0) {
            ArrayList<TreeNode> ret =  new ArrayList<TreeNode>();
            ret.add(null);
            return ret;
        }
        return generate(1,n);
    }
}
