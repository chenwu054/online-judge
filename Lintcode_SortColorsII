/*
Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.
Have you met this question in a real interview?
Example

Given colors=[3, 2, 2, 1, 4], k=4, your code should sort colors in-place to [1, 2, 2, 3, 4].
Note

You are not suppose to use the library's sort function for this problem.
Challenge

A rather straight forward solution is a two-pass algorithm using counting sort. That will cost O(k) extra memory. Can you do it without using extra memory?

*/
class Solution:
    """
    @param colors: A list of integer
    @param k: An integer
    @return: nothing
    """
    def sortColors2(self, colors, k):
        # write your code here
        n = len(colors)
        index = [n-1 for i in range(k+1)]
        index[0]=index[1]=0
        for i in range(1,k+1):
            j=index[i-1]
            while j<n and colors[j]==i:
                j+=1
            index[i]=j
            if j>=n :
                break;
        while index[k]<n:
            while index[k]<n and colors[index[k]]==k:
                index[k]+=1
            if index[k]<n:
                i = colors[index[k]]
                while index[i]<index[k]:
                    temp=colors[index[i]]
                    colors[index[i]]=i
                    index[i]+=1
                    i=temp
                colors[index[i]]=i
                index[i]+=1
                for j in range(1,k+1): #very important!! must be at least last index, if there is no such value, the invariant
                    index[j]=max(index[j],index[j-1])
                    
                    
