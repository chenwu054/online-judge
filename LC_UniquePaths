/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
*/
public class Solution {
    public int uniquePaths(int m, int n) {
        int[] res = new int[n];
        Arrays.fill(res,1);
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                res[j]+=res[j-1];
            }
        }
        return res[n-1];
    }
}
/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/
public class Solution {
    public int uniquePathsWithObstacles(int[][] g) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        int n=g.length,m=g[0].length;
        int[][] dp = new int[n][m];
        dp[0][0]=g[0][0]==1?0:1;
        for(int i=1;i<n;i++)
            dp[i][0]=g[i][0]==1?0:dp[i-1][0];
        for(int j=1;j<m;j++)
            dp[0][j]=g[0][j]==1?0:dp[0][j-1];
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                dp[i][j]=g[i][j]==1?0:dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[n-1][m-1];
    }
}
