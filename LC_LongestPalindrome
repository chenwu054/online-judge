/*
Given a string S, find the longest palindromic substring in S.
You may assume that the maximum length of S is 1000, 
and there exists one unique longest palindromic substring.
*/
public class Solution {
  public String longestPalindrome(String s) {
      if(s==null||s.length()<2) return s;
      int n = s.length();
      boolean[][] dp = new boolean[n][n];
      int start=0,end=1,maxLen=0;
      for(int i=0;i<n;i++)
          dp[i][i]=true;
      for(int i=0;i<n-1;i++){
          dp[i][i+1]=s.charAt(i)==s.charAt(i+1);
          if(dp[i][i+1]){
              start=i;
              end=i+1+1;
              maxLen=1;
          }
      }
      
      for(int len=2;len<n;len++){
          for(int i=0;i<n-len;i++){
              dp[i][i+len]=dp[i+1][i+len-1] && (s.charAt(i)==s.charAt(i+len));
              if(dp[i][i+len] && len>maxLen){
                  start=i;
                  end=i+len+1;
                  maxLen=len;
              }
          }
      }
      return s.substring(start,end);
  }
}
