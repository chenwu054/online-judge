/*
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region .

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/
public class Solution {
    public void solve(char[][] board) {
        if(board==null||board.length==0) return;
        int n=board.length,m=board[0].length;
        char dye='M';
        for(int i=0;i<n;i++){
            if(board[i][0]=='O') board[i][0]=dye;
            if(board[i][m-1]=='O') board[i][m-1]=dye;
        }
        for(int j=0;j<m;j++){
            if(board[0][j]=='O') board[0][j]=dye;
            if(board[n-1][j]=='O') board[n-1][j]=dye;
        }
        int i=1,j=1;
        while(i<n-1){
            for(int k=1;k<m-1;k++){
                if((board[i-1][k]==dye||board[i][k-1]==dye)&&board[i][k]=='O') board[i][k]=dye;
                if((board[i-1][m-1-k]==dye||board[i][m-k]==dye)&&board[i][m-1-k]=='O') board[i][m-1-k]=dye;
                if((board[n-i][k]==dye||board[n-1-i][k-1]==dye)&&board[n-1-i][k]=='O') board[n-1-i][k]=dye;
                if((board[n-i][m-1-k]==dye||board[n-1-i][m-k]==dye)&&board[n-1-i][m-1-k]=='O') board[n-1-i][m-1-k]=dye;      
            }
            i++;
        }
        while(j<m-1){
            for(int k=1;k<n-1;k++){
                if((board[k-1][j]==dye||board[k][j-1]==dye)&&board[k][j]=='O') board[k][j]=dye;
                if((board[n-k][j]==dye||board[n-1-k][j-1]==dye)&&board[n-1-k][j]=='O') board[n-1-k][j]=dye;
                if((board[k-1][m-1-j]==dye||board[k][m-j]==dye)&&board[k][m-1-j]=='O') board[k][m-1-j]=dye;
                if((board[n-k][m-1-j]==dye||board[n-1-k][m-j]==dye)&&board[n-1-k][m-1-j]=='O') board[n-1-k][m-1-j]=dye;
            }
            j++;
        }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
            }
        }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(board[i][j]==dye)
                    board[i][j]='O';
            }
        }
    }
    
}

/*
    bfs
*/
public class Solution {
    static char dye ='M';
    static class Pos{
        int x,y;
        public Pos(int x, int y){
            this.x=x;
            this.y=y;
        }
    }
    public boolean valid(int x, int y, int n, int m){
        return !(x<0||y<0||x>=n||y>=m);
    }
    public void solve(char[][] board) {
        if(board==null||board.length==0) return;
        int n=board.length,m=board[0].length;
        Queue<Pos> q = new LinkedList<Pos>();
        for(int i=0;i<n;i++){
            if(board[i][0]=='O'){
                Pos newPos= new Pos(i,0);
                q.offer(newPos);
            }
            if(board[i][m-1]=='O'){
                Pos newPos = new Pos(i,m-1);
                q.offer(newPos);
            }
        }
        for(int j=0;j<m;j++){
            if(board[0][j]=='O'){
                Pos newPos = new Pos(0,j);
                q.offer(newPos);
            }
            if(board[n-1][j]=='O'){
                Pos newPos = new Pos(n-1,j);
                q.offer(newPos);
            }
        }
        int x=0,y=0;
        while(q.size()>0){
            Pos cur = q.poll();
            x=cur.x;
            y=cur.y;
            board[x][y]=dye;
            if(valid(x-1,y,n,m) && board[x-1][y]=='O'){
                Pos newPos = new Pos(x-1,y);
                q.offer(newPos);
            }
            if(valid(x,y-1,n,m) && board[x][y-1]=='O'){
                Pos newPos = new Pos(x,y-1);
                q.offer(newPos);
            }
            if(valid(x+1,y,n,m) && board[x+1][y]=='O'){
                Pos newPos = new Pos(x+1,y);
                q.offer(newPos);
            }
            if(valid(x,y+1,n,m) && board[x][y+1]=='O'){
                Pos newPos = new Pos(x,y+1);
                q.offer(newPos);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==dye)
                    board[i][j]='O';
            }
        }
    }
}
