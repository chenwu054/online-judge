/*
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].

Show Company Tags
Show Tags
Show Similar Problems

*/
public class Solution {
    
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums == null || nums.length==0) {
            return list;
        }
        int n = nums.length;
        int[] pos = new int[n];
        for(int i = 0 ;i< n;i++) {
            pos[i] = i;
        }
        int[] ret = new int[n];
        mergeSort(nums, 0, n-1, pos, ret);
        for(int i =0; i< n;i++) {
            list.add(ret[i]);
        }
        return list;
    }
    private void mergeSort(int[]a, int s, int e, int[] pos, int[] ret) {
        if(s>=e) {
            return;
        }
        int m = s + ((e-s)>>1);
        mergeSort(a, s, m, pos, ret);
        mergeSort(a, m+1, e, pos, ret);
        int[] t = new int[e-s+1];
        int k =0;
        for(int i = s, j = m+1; i <= m || j<=e;) {
            if(j>e || (i<=m && a[pos[i]] <= a[pos[j]])) {
                t[k++] = pos[i];
                ret[pos[i++]] += j - 1 - (m+1) + 1;
            } else {
                t[k++] = pos[j++];
            }
        }
        for(int i = s; i <= e; i++) {
            pos[i] = t[i-s];
        }
    }
}
