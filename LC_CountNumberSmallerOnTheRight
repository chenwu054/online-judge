class SegmentTreeNode {
    int start, end;
    int num;
    SegmentTreeNode ltree, rtree;
    public SegmentTreeNode(int s, int e) {
        start = s;
        end = e;
    }
}
​
public class Solution { 
    SegmentTreeNode root = null;
    
    public SegmentTreeNode buildTree(int[] nums, int left, int right) {
        SegmentTreeNode root = new SegmentTreeNode(left, right);
        if (left != right) {
            int mid = left + (right - left)/2;
            root.ltree = buildTree(nums, left, mid);
            root.rtree = buildTree(nums, mid+1, right);
        }
        return root;
    }
    
    private void update(SegmentTreeNode root, int i, int val) {
        if (root.start == root.end) {
            root.num += 1;
        } else {
            int mid = root.start + (root.end - root.start)/2;
            if (i <= mid) {
                update(root.ltree, i, val);
            } else {
                update(root.rtree, i, val);
            }
            root.num = root.ltree.num + root.rtree.num;
        }
    }
​
    private int query(SegmentTreeNode root, int i, int j) {
        if (root.start == i && root.end == j) {
            return root.num;
        } else {
            int mid = root.start + (root.end - root.start)/2;
            if (j <= mid) {
                return query(root.ltree, i, j);
            } else if (i > mid) {
                return query(root.rtree, i, j);
            } else {
                return query(root.ltree, i, root.ltree.end) + query(root.rtree, root.rtree.start, j);
            }
        }
    }
​
    public List<Integer> countSmaller(int[] nums) {
        int[] tmp = nums.clone();
        Arrays.sort(tmp);
        for (int i = 0; i < nums.length; i++) {
            nums[i] = Arrays.binarySearch(tmp, nums[i]) + 1;
        }
        int[] bit = new int[nums.length + 1];
        root = buildTree(bit, 0, bit.length-1);
        Integer[] ans = new Integer[nums.length];
        for (int i = nums.length - 1; i >= 0; i--) {
            ans[i] = query(root, 0, nums[i] - 1);
            update(root, nums[i], 1);
        }
        return Arrays.asList(ans);
    }
}


/*
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].

Show Company Tags
Show Tags
Show Similar Problems

*/
public class Solution {
    
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums == null || nums.length==0) {
            return list;
        }
        int n = nums.length;
        int[] pos = new int[n];
        for(int i = 0 ;i< n;i++) {
            pos[i] = i;
        }
        int[] ret = new int[n];
        mergeSort(nums, 0, n-1, pos, ret);
        for(int i =0; i< n;i++) {
            list.add(ret[i]);
        }
        return list;
    }
    private void mergeSort(int[]a, int s, int e, int[] pos, int[] ret) {
        if(s>=e) {
            return;
        }
        int m = s + ((e-s)>>1);
        mergeSort(a, s, m, pos, ret);
        mergeSort(a, m+1, e, pos, ret);
        int[] t = new int[e-s+1];
        int k =0;
        for(int i = s, j = m+1; i <= m || j<=e;) {
            if(j>e || (i<=m && a[pos[i]] <= a[pos[j]])) {
                t[k++] = pos[i];
                ret[pos[i++]] += j - 1 - (m+1) + 1;
            } else {
                t[k++] = pos[j++];
            }
        }
        for(int i = s; i <= e; i++) {
            pos[i] = t[i-s];
        }
    }
}
