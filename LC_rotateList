/*
  Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(n==0 || head==null) return head;
        int len=0;
        ListNode node = head;
        while(node!=null){
            node=node.next;
            len++;
        }
        n=n%len;
        if(n==0) return head;
        int i=0;
        node=head;
        while(i<n){
            node=node.next;
            i++;
        }
        ListNode last=head;
       // node=node.next;
        while(node.next!=null){
            node=node.next;
            last=last.next;
        }
        node.next=head;
        ListNode newHead=last.next;
        last.next=null;
        return newHead;
    }
}
