/*
Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

*/
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums==null||nums.length==0) return 0;
        int tot=0,i=0,j=0,minLen=-1;
        while(i<nums.length){
            if(tot>=0){
                tot+=nums[i];
                if(tot>=s){
                    while(j<=i && tot>=s){
                        tot-=nums[j++];
                    }
                    if(minLen<0 || minLen>i-j+1){
                        minLen=i-j+2;
                    }    
                }
            }
            else{
                tot=0;
            }
            i++;
        }
        return Math.max(minLen,0);
    }
}
