/*
  Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.
*/
public class Solution {
  // you need to treat n as an unsigned value
  public int hammingWeight(int n) {
      int tot = 0;
	int[] map = {0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4};
      for(int i=0;i<8;i++){
          byte cur = (byte) ((n & (0xf<<(4*i))) >>> (4*i));
          tot+=map[cur];
      }
      return tot;       
  }
}
