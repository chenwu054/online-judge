/*
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

*/
class TrieNode {
    // Initialize your data structure here.
    boolean isWord;
    TrieNode[] next;
    public TrieNode() {
        isWord=false;
        next=new TrieNode[26];
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        if(word==null||word.length()==0){
            return;
        }
        TrieNode node=this.root;
        int i=0;
        while(i<word.length()){
            char c = word.charAt(i);
            if(node.next[c-'a']==null){
                node.next[c-'a']=new TrieNode();
            }
            node=node.next[c-'a'];
            i++;
        }
        node.isWord=true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        if(word==null||word.length()==0) return false;
        TrieNode node=root;
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            if(node.next[c-'a']==null){
                return false;
            }
            node=node.next[c-'a'];
        }
        return node.isWord;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        if(prefix==null) return false;
        if(prefix.length()==0) return true;
        TrieNode node=root;
        for(int i=0;i<prefix.length();i++){
            char c=prefix.charAt(i);
            if(node.next[c-'a']==null){
                return false;
            }
            node=node.next[c-'a'];
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
