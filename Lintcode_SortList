/*
Sort a linked list in O(n log n) time using constant space complexity.

Have you met this question in a real interview? Yes
Example
Given 1-3->2->null, sort it to 1->2->3->null.
*/
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param head: The first node of the linked list.
    @return: You should return the head of the sorted linked list,
                  using constant space complexity.
    """
    def sortList(self, head):
        # write your code here
        if head==None or head.next==None:
            return head
        
        return self.mergeSort(head)
        
    def mergeSort(self,head):
        if head==None or head.next==None:
            return head
        fast,slow=head.next,head
        while fast!=None:
            fast=fast.next
            if fast!=None:
                fast=fast.next
                slow=slow.next
        nextHalf=slow.next
        slow.next=None
        firstHalf = self.mergeSort(head)
        secondHalf = self.mergeSort(nextHalf)
        node = ListNode(0)
        ret=node
        while secondHalf!=None and firstHalf!=None:
            if secondHalf.val<firstHalf.val:
                node.next=secondHalf
                secondHalf=secondHalf.next
            else:
                node.next=firstHalf
                firstHalf=firstHalf.next
            node=node.next
        node.next= secondHalf if firstHalf==None else firstHalf
        return ret.next
