/*
Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.

Example 1:
nums = [1, 3], n = 6
Return 1.

Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2:
nums = [1, 5, 10], n = 20
Return 2.
The two patches can be [2, 4].

Example 3:
nums = [1, 2, 2], n = 5
Return 0.
Solution: 
1. try all the possible num in [1, n]
2. If were able to do [1,i], then given another number in nums v, can do [1, i + v];
3. We can only add nums that are < num
4. If we cannot do num i, then we have to add num i, thus we can do i and [1, i+i]; then keep going to step 2.

*/
public class Solution {
    public int minPatches(int[] nums, int n) {
        long num = 1;
        int added = 0,i = 0;
        while(num <= n) {
            if(i<nums.length && nums[i] <= num) {
                num += nums[i++];
            } else {
                num += num;
                added++;
            }
        }
        return added;
    }
}
