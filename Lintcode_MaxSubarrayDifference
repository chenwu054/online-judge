/*
Given an array with integers.

Find two non-overlapping subarrays A and B, which |SUM(A) - SUM(B)| is the largest.

Return the largest difference.

Have you met this question in a real interview? Yes
Example
For [1, 2, -3, 1], return 6

Note
The subarray should contain at least one number

Challenge
O(n) time and O(n) space.
*/
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: An integer indicate the value of maximum difference between two
     *          Subarrays
     */
    public int maxDiffSubArrays(ArrayList<Integer> nums) {
        if (nums == null || nums.size() == 0) {
            return 0;
        }
        int n = nums.size();
        int[] leftSumMax=new int[n];
        int[] leftSumMin=new int[n];
        int leftMax=nums.get(0),leftMin=nums.get(0);
        leftSumMax[0]=nums.get(0);
        leftSumMin[0]=nums.get(0);
        for(int i=1;i<n;i++){
            leftMax=Math.max(leftMax,0)+nums.get(i);
            leftMin=Math.min(leftMin,0)+nums.get(i);
            leftSumMax[i]=Math.max(leftSumMax[i-1],leftMax);
            leftSumMin[i]=Math.min(leftSumMin[i-1],leftMin);
        }
        int rightMin=nums.get(n-1),rightMax=nums.get(n-1),rightSumMax=nums.get(n-1),rightSumMin=nums.get(n-1);
        int ret=Math.max(Math.abs(leftSumMax[n-2]-rightSumMin),Math.abs(rightSumMax-leftSumMin[n-2]));
        for(int i=n-2;i>0;i--){
            rightMax=Math.max(0,rightMax)+nums.get(i);
            rightMin=Math.min(0,rightMin)+nums.get(i);
            rightSumMax=Math.max(rightSumMax,rightMax);
            rightSumMin=Math.min(rightSumMin,rightMin);
            ret = Math.max(Math.max(Math.abs(leftSumMax[i-1]-rightSumMin),Math.abs(rightSumMax-leftSumMin[i-1])),ret);
        }
        return ret;
    }
}


