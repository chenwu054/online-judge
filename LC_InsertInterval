/*
  Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<Interval> ret = new ArrayList<Interval>();
        if(intervals.size()==0)
            intervals.add(newInterval);
        else{
            for(int i=0;i<intervals.size();i++){
                if(newInterval.start<intervals.get(i).start){
                    intervals.add(i,newInterval);  
                    break;
                }
            }
            intervals.add(newInterval);
        }
        ret.add(intervals.get(0));
        for(int i=1;i<intervals.size();i++){
            int last = ret.size()-1;
            if(intervals.get(i).start>ret.get(last).end)
                ret.add(intervals.get(i));
            else{
                ret.get(last).end=Math.max(ret.get(last).end,intervals.get(i).end);
            }
        }
        return ret;
    }
}
