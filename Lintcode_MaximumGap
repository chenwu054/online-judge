/*
Given an unsorted array, find the maximum difference between the successive elements in its sorted form.

Return 0 if the array contains less than 2 elements.
Have you met this question in a real interview?
Example

Given [1, 9, 2, 5], the sorted form of it is [1, 2, 5, 9], the maximum gap is between 5 and 9 = 4.
Note

You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
Challenge

Sort is easy but will cost O(nlogn) time. Try to solve it in linear time and space.

*/
class Solution {
    /**
     * @param nums: an array of integers
     * @return: the maximum difference
     */
    public int maximumGap(int[] nums) {
        // write your code here
        if(nums==null||nums.length<2) return 0;
        partition(31,nums,0,nums.length-1);
        int max=0;
        for(int i=1;i<nums.length;i++){
            max=Math.max(max,nums[i]-nums[i-1]);
        }
        return max;
    }
    public void partition(int bit, int[] num, int start, int end){
        if(end<=start || bit <0){
            return;
        }
        int s = start, e = end, b = (1<<bit);
        while(s<=e){
            while(s<=e && ((num[s] & b)==0)){
                s++;
            }
            while(s<=e && ((num[e] & b)>0)){
                e--;
            }
            if(s<e){
                int temp = num[s];
                num[s]=num[e];
                num[e]=temp;
            }
        }
        partition(bit-1, num,start,e);
        partition(bit-1,num,s,end);
    }
}
