/*
Given an integer array, find a continuous rotate subarray where the sum of numbers is the biggest. 
Your code should return the index of the first number and the index of the last number. 
(If their are duplicate answer, return anyone. The answer can be rorate array or non- rorate array)

Solution: 1. find the max subarray in the loop
          2. find the min subarray in the loop, including rotated
          if max > sum-min
          else return (minEnd+1)%n to (minStart-1)%n
*/
class Solution:
    # @param {int[]} A an integer array
    # @return {int[]}  A list of integers includes the index of the 
    #                  first number and the index of the last number
    def continuousSubarraySumII(self, a):
        # Write your code here
        min=max=pLast=nLast=sum=a[0]
        pStart=pEnd=ptStart=ptEnd=nStart=nEnd=ntStart=ntEnd=0
        n=len(a)
        for i in range(1,n,1):
            if pLast>0:
                pLast=pLast+a[i%n]
                if max<pLast:
                    max=pLast
                    ptEnd=i
                    pStart=ptStart
                    pEnd=ptEnd
                else:
                    ptEnd=i
            else:
                pLast=a[i]
                ptStart=i
                ptEnd=i
                if pLast>max:
                    max=pLast
                    pStart=ptStart
                    pEnd=ptEnd
            sum+=a[i]
        for i in range(1,2*n,1):
            if nLast<0 and i-ntStart<n:
                nLast=nLast+a[i%n]
                if min>nLast:
                    min=nLast
                    ntEnd=i
                    nStart=ntStart
                    nEnd=ntEnd
                else:
                    ntEnd=i
            else:
                nLast=a[i%n]
                ntStart=i
                ntEnd=i
                if nLast<min:
                    min=nLast
                    nStart=ntStart
                    nEnd=ntEnd
            
        if max>sum-min or (nStart==0 and nEnd==n-1):
            return [pStart, pEnd]
        
        return [(nEnd+1)%n,(nStart-1)%n]
        
    
    


/*

Given an integer array, find a continuous subarray where the sum of numbers is the biggest. 
Your code should return the index of the first number and the index of the last number. 
(If their are duplicate answer, return anyone)

Have you met this question in a real interview? Yes
Example
Give [-3, 1, 3, -3, 4], return [1,4]
*/
class Solution:
    # @param {int[]} A an integer array
    # @return {int[]}  A list of integers includes the index of the 
    #                  first number and the index of the last number
    def continuousSubarraySum(self, A):
        # Write your code here
        if A==None or len(A)==0:
            return 0
        max=A[0]
        start=end=0
        tStart=tEnd=0
        last=A[0]
        for i in range(1,len(A),1):
            if last>0:
                last=last+A[i]
                if max<last:
                    max=last
                    tEnd=i
                    start=tStart
                    end=tEnd
                else:
                    tEnd=i
            else:
                last=A[i]
                tStart=i
                tEnd=i
                if last>max:
                    max=last
                    start=tStart
                    end=tEnd
                
        return [start,end]
                
