/*
  Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(head==null||head.next==null||head.next.next==null)
            return;
        ListNode slow=head,fast=head.next;
        // to make sure that slow is the middle point or the one previous to the middle point
        // we must make sure that fast.next!=null for the even nodes case
        //fast!=null is for the odd case.
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next;
            if(fast==null)
                break;
            fast=fast.next;
        }
        ListNode mid = slow;
        //slow=slow.next;
        ListNode next=slow.next;
        fast=next.next;
        mid.next=null;
        while(fast!=null){
            next.next=slow;
            slow=next;
            next=fast;
            fast=fast.next;
        }
        next.next=slow;
        fast=head.next;
        slow=head;
        while(slow!=null && next!=slow){
            fast=slow.next;
            slow.next=next;
            next=next.next;
            slow=slow.next;
            slow.next=fast;
            slow=fast;
        }
        
    }
}











public ListNode reverse(ListNode head){
  if(head==null || head.next==null) return head;
  ListNode last=null,cur=head,next=head.next;
  while(next!=null){
      cur.next=last;
      last=cur;
      cur=next;
      next=next.next;
  }
  cur.next=last;
  return cur;
}
public void reorderList(ListNode head) {
  if(head==null || head.next==null) return;
  ListNode slow=head,fast=head.next;
  while(true){
      fast=fast.next;
      if(fast==null||fast.next==null) break;
      fast=fast.next;
      slow=slow.next;
  }
  ListNode secondHalf=slow.next;
  slow.next=null;
  ListNode newHead=reverse(secondHalf);
  ListNode n1=head,n2=newHead,node=n1;
  while(true){
      n1=n1.next;
      node.next=n2;
      n2=n2.next;
      node=node.next;
      if(n1==null) break;
      node.next=n1;
      node=node.next;
  }
  
}
