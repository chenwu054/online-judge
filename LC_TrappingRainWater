/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
*/

public class Solution {
    public int getArea(int[] h, int start, int end){
        int totArea = Math.min(h[start],h[end])*(end-start-1);
        for(int i=start+1;i<end;i++)
            totArea-=h[i];
        return totArea;
    }
    public int trap(int[] height) {
        int totArea = 0, area =0;
        Stack<Integer> k = new Stack<Integer>();
        int n=height.length,last=0;
        for(int i=0;i<n;i++){
            if(k.size()==0 || height[i]<=height[k.peek()])
                k.push(i);
            else{
                while(k.size()>0 && height[k.peek()]<height[i])
                    last=k.pop();
                if(k.size()==0){
                    area = getArea(height,last,i);
                    totArea+=area;
                }
                k.push(i);
            }
        }
        while(k.size()>0){
            last = k.pop();
            if(k.size()>0){
                totArea+=getArea(height,k.peek(),last);
            }
        }
        return totArea;
    }
}
