/*

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
*/
public class Solution {
    public ArrayList<ArrayList<String>> partition(String s) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ArrayList<ArrayList<String>> ret = new ArrayList<ArrayList<String>>();
        if(s==null || s.length()==0)
            return ret;
        int n = s.length();
        boolean[][] isPalin = new boolean[n][n];
        for(int len=1;len<=n;len++){
            for(int i=0;i<=n-len;i++){
                if(len==1){
                    isPalin[i][i+len-1]=true;
                }
                else{
                    if(s.charAt(i)==s.charAt(i+len-1) && (len==2 || isPalin[i+1][i+len-2]))
                        isPalin[i][i+len-1]=true;
                }
            }
        }
        //set the initial stage.
        ArrayList<Integer> index= new ArrayList<Integer>();
        for(int i=0;i<n;i++){
            if(isPalin[0][i]){
                ArrayList<String> toAdd = new ArrayList<String>();
                toAdd.add(s.substring(0,i+1));
                ret.add(toAdd);   
                index.add(i+1);
            }
        }
        //bfs on the current toReturn arraylist.
        while(true){
            boolean finish = true;
            int length= ret.size();
            for(int i=0;i<length;i++){
                if(index.get(i)!=n){
                    finish=false;
                    int start = index.get(i);
                    ret.get(i).add(s.substring(start,start+1));
                    index.set(i,start+1);
                    for(int j=start+1;j<n;j++){
                        if(isPalin[start][j]){
                            ret.add(new ArrayList<String>(ret.get(i)));
                            //index.add(index.get(i));
                            ArrayList<String> cur = ret.get(ret.size()-1);
                            cur.set(cur.size()-1,s.substring(start,j+1));
                            index.add(j+1);
                        }
                    }
                }
            }
            if(finish)
                break;
        }
        return ret;
    }
}


/*
  dfs
*/
public void dfs(boolean[][] isPalin, String s, int start, ArrayList<String> cur, ArrayList<ArrayList<String>> ret){
    if(start==s.length()){
        ret.add(cur);
        return;
    }
    for(int i=start;i<s.length();i++){
        if(isPalin[start][i]){
            ArrayList<String> next=new ArrayList<String>(cur);    
            next.add(s.substring(start,i+1));
            dfs(isPalin,s,i+1,next,ret);
        }
    }
}
public ArrayList<ArrayList<String>> partition(String s) {
    ArrayList<ArrayList<String>> ret =new ArrayList<ArrayList<String>>();
    int n=s.length();
    boolean[][] isPalin=new boolean[n][n];
    for(int len=0;len<n;len++){
        for(int i=0;i<n-len;i++){
            if(len==0)
                isPalin[i][i+len]=true;
            else if(len==1)
                isPalin[i][i+len]=s.charAt(i)==s.charAt(i+len);
            else{
                isPalin[i][i+len]=(s.charAt(i)==s.charAt(i+len) && isPalin[i+1][i+len-1]);
            }
        }
    }
    dfs(isPalin,s,0,new ArrayList<String>(),ret);
    return ret;
}
