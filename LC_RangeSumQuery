/*
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.
*/
public class NumArray {
    int[] bit;
    public NumArray(int[] nums) {
        int n = nums.length;
        bit = new int[n+1];
        for(int i=1; i <= n;i++) {
            add(i, nums[i-1]);
        }
    }
    private void add(int i, int val) {
        while(i < bit.length) {
            bit[i] += val;
            i += i&-i;
        }
    }
    private int getSum(int i) {
        int sum = 0;
        while(i > 0) {
            sum += bit[i];
            i -= i&-i;
        }
        return sum;
    }
    public int sumRange(int i, int j) {
        return getSum(j+1) - getSum(i);
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);
