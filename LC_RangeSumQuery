/*
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
*/
public class NumMatrix {
    int[][] bit;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0) {
            bit = new int[0][0];
            return ;
        }
        int n = matrix.length, m = matrix[0].length;
        bit = new int[n+1][m+1];
        for(int i = 1; i<= n;i++) {
            for(int j =1; j<=m; j++) {
                add(i,j, matrix[i-1][j-1]);
            }
        }
    }
    private void add(int x, int y, int val) {
        while(x < bit.length) {
            addy(x,y,val);
            x += x&-x;
        }
    }
    private void addy(int x, int y, int val) {
        while(y < bit[0].length) {
            bit[x][y] += val;
            y += y&-y;
        }
    }
    private int getSum(int x, int y) {
        int sum = 0;
        while(x > 0) {
            sum += getSumY(x, y);
            x -= x&-x;
        }
        return sum;
    }
    private int getSumY(int x, int y) {
        int sum = 0;
        while(y > 0) {
            sum += bit[x][y];
            y -= y&-y;
        }
        return sum;
    }
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return getSum(row2+1, col2+1) - getSum(row2+1, col1) - getSum(row1, col2+1) + getSum(row1, col1);
    }
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);

/*
Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.
*/
public class NumArray {
    int[] bit;
    int[] nums;
    public NumArray(int[] nums) {
        int n = nums.length;
        this.nums = nums;
        bit = new int[n+1];
        for(int i = 1; i<=n;i++) {
            add(i, nums[i-1]);
        }
    }
    private void add(int i, int delta) {
        while(i<bit.length) {
            bit[i] += delta;
            i += i&-i;
        }
    }

    void update(int i, int val) {
        int delta = val - nums[i];
        nums[i] = val;
        add(i+1, delta);
    }

    public int getSum(int i) {
        int sum = 0;
        while(i>0) {
            sum+=bit[i];
            i -= i&-i;
        }
        return sum;
    }
    public int sumRange(int i, int j) {
        return getSum(j+1) - getSum(i);
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);

/*
Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.
*/
public class NumArray {
    int[] bit;
    public NumArray(int[] nums) {
        int n = nums.length;
        bit = new int[n+1];
        for(int i=1; i <= n;i++) {
            add(i, nums[i-1]);
        }
    }
    private void add(int i, int val) {
        while(i < bit.length) {
            bit[i] += val;
            i += i&-i;
        }
    }
    private int getSum(int i) {
        int sum = 0;
        while(i > 0) {
            sum += bit[i];
            i -= i&-i;
        }
        return sum;
    }
    public int sumRange(int i, int j) {
        return getSum(j+1) - getSum(i);
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);
