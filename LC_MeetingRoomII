/*
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.
*/
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals == null) {
            return 0;
        }
        int c = 0;
        PriorityQueue<Integer> q = new PriorityQueue<>(1, new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                if(Math.abs(a) != Math.abs(b)) {
                    return Math.abs(a) - Math.abs(b);
                }
                if(a<0) {
                    return -1;
                } if(b<0) {
                    return 1;
                }
                return 0;
            }
        });
        for(Interval a : intervals) {
            q.add(a.start);
            q.add(-a.end);
        }
        int t = 0;
        while(!q.isEmpty()) {
            Integer i = q.poll();
            if(i>=0) {
                t++;
                c = Math.max(c, t);
            } else {
                t--;
            }
        }
        return c;
    }
}
