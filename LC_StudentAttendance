You are given a string representing an attendance record for a student. The record only contains the following three characters:
'A' : Absent.
'L' : Late.
'P' : Present.
A student could be rewarded if his attendance record doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).

You need to return whether the student could be rewarded according to his attendance record.

Example 1:
Input: "PPALLP"
Output: True
Example 2:
Input: "PPALLL"
Output: False

class Solution:
    def checkRecord(self, s):
        """
        :type s: str
        :rtype: bool
        """
        l_last_index, a_count = -1, 0
        for i in range(len(s)):
            if s[i] == 'L':
                if l_last_index>=0 and l_last_index == i-1:
                    l_count=l_count+1
                    if l_count > 2:
                        return False
                else:
                    l_count=1
                l_last_index=i    
            elif s[i] == 'A':
                a_count = a_count + 1
                if a_count > 1:
                    return False
        return True
        
II:
Given a positive integer n, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.

A student attendance record is a string that only contains the following three characters:

'A' : Absent.
'L' : Late.
'P' : Present.
A record is regarded as rewardable if it doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).

Example 1:
Input: n = 2
Output: 8 
Explanation:
There are 8 records with length 2 will be regarded as rewardable:
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL"
Only "AA" won't be regarded as rewardable owing to more than one absent times. 
Note: The value of n won't exceed 100,000.

if n == 1:
    return 3
if n == 0:
    return 0
nums = [1, 1, 2]
i = 2
while i < n: # end with 'P', 'PL', 'PLL' but no 'PLLL' with 'A'
    nums.append((nums[i] + nums[i-1] + nums[i-2])% 1000000007)
    i += 1
result = (nums[n] + nums[n-1] + nums[n-2]) % 1000000007
for i in range(n): # with A in the middle: possibilities with A in index i is left possibility x right possibility
    result += nums[i+1] * nums[n-i] % 1000000007
    result %= 1000000007
return result
