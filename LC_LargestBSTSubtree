/*
Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

Note:
A subtree must include all of its descendants.
Here's an example:
    10
    / \
   5  15
  / \   \ 
 1   8   7
The Largest BST Subtree in this case is the highlighted one. 
The return value is the subtree's size, which is 3.

Clarify:
Note that the subtree means the entire tree from any internal node. not just a portion of a subtree.

Hint:

You can recursively use algorithm similar to 98. Validate Binary Search Tree at each node of the tree, which will result in O(nlogn) time complexity
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int largestBSTSubtree(TreeNode root) {
        if(root == null) {
            return 0;
        }
        Integer[] max = {0};
        largest(root, max);
        return max[0];
    }
    private int[] largest(TreeNode root, Integer[] max) {
        //
        if(root == null) {
            return null;
        }
        int[] ret = new int[3];
        int[] left = largest(root.left, max);
        int[] right = largest(root.right, max);
        if((left == null || left[1] < root.val && left[2] > 0) && (right == null || right[0] > root.val && right[2] > 0)) {
            // valid;
            ret[0] = (left == null) ? root.val:left[0];
            ret[1] = (right == null) ? root.val:right[1];
            ret[2] = (left== null ? 0:left[2]) + 1 + (right == null ?  0 : right[2]);
            max[0] = Math.max(ret[2], max[0]);
            return ret;
        }
        ret[2] = -1;
        return ret;
    }
}
