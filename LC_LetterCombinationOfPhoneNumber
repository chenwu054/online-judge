/*
  Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
*/
public class Solution {
    String[] str={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public ArrayList<String> letterCombinations(String digits) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<String> ret = new ArrayList<String>();
        if(digits==null)
            return ret;
        ArrayList<StringBuilder> col = new ArrayList<StringBuilder>();
        col.add(new StringBuilder());
        int len=0;
        for(int i=0;i<digits.length();i++){
            len=col.size();
            for(int j=0;j<len;j++){
                col.get(j).append(str[digits.charAt(i)-'0'].charAt(0));
            }
            for(int j=1;j<str[digits.charAt(i)-'0'].length();j++){
                for(int k=0;k<len;k++){
                    col.add(new StringBuilder(col.get(k)));
                    col.get(col.size()-1).setCharAt(col.get(col.size()-1).length()-1,str[digits.charAt(i)-'0'].charAt(j));
                }
            }
        }
        for(int i=0;i<col.size();i++){
            ret.add(col.get(i).toString());
        }
        return ret;
    }
}
