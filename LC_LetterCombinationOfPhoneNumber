/*
  Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
*/
public class Solution {
    String[] chart = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public ArrayList<String> letterCombinations(String digits) {
        ArrayList<String> ret =new ArrayList<String>();
        if(digits==null||digits.length()==0){ 
            ret.add("");
            return ret;
        }
        ArrayList<StringBuilder> arr = new ArrayList<StringBuilder>();
        arr.add(new StringBuilder());
        for(int i=0;i<digits.length();i++){
            int len = arr.size();
            String str = chart[digits.charAt(i)-'0'];
            for(int j=0;j<len;j++){
                for(int k=1;k<str.length();k++){
                    StringBuilder newSb= new StringBuilder();
                    newSb.append(arr.get(j)).append(str.charAt(k));
                    arr.add(newSb);
                }
                arr.get(j).append(str.charAt(0));
            }
        }
        for(int i=0;i<arr.size();i++){
            ret.add(arr.get(i).toString());
        }
        return ret;
    }
}
