/*
  Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
For example,
If n = 4 and k = 2, a solution is:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/
/*
  iterative
*/
public List<List<Integer>> combine(int n, int k) {
		// write your code here
		List<List<Integer>> ret = new ArrayList<List<Integer>>();
		List<Integer> list = new ArrayList<Integer>();
		list.add(1);
	   while(list.size()>0){
	        int last = list.get(list.size()-1)+1;
	        int j = 0;
	        while(list.size()<k){
	            list.add(j+last);
	            j++;
	        }
	        ret.add(new ArrayList<Integer>(list));
	        while(list.size()>0 && list.get(list.size()-1) == n - (k-list.size())){
	            list.remove(list.size()-1);
	        }
	        if(list.size()>0){
	            Integer increase=list.remove(list.size()-1);
	            list.add(increase+1);
	        }
	    }
		return ret;
    }
public class Solution {
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        for(int i=1;i<=n-(k-1);i++){
            ret.add(new ArrayList<Integer>());
            ret.get(i-1).add(i);
        }
        for(int i=1;i<k;i++){
            int len = ret.size();
            for(int j=0;j<len;j++){
                ret.get(j).add(ret.get(j).get(i-1)+1);
                for(int m=ret.get(j).get(i)+1;m<=n-(k-i-1);m++){
                    ArrayList<Integer> newArr=new ArrayList<Integer>(ret.get(j));
                    newArr.set(i,m);
                    ret.add(newArr);
                }
            }
        }   
        return ret;
    }
}
/*
  recursive.
*/
public class Solution {
    public void helper(int n, int start,int k, ArrayList<Integer> cur,ArrayList<ArrayList<Integer>> ret){
        if(cur.size()==k){
            ret.add(cur);
            return;
        }
        
        for(int i=start;i<=n-(k-cur.size()-1);i++){
            ArrayList<Integer> newArr = new ArrayList<Integer>(cur);
            newArr.add(i);
            helper(n,i+1,k,newArr,ret);
        }
    }
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        helper(n,1,k,new ArrayList<Integer>(),ret);       
        return ret;
    }
}
