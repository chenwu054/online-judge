/*
  Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
For example,
If n = 4 and k = 2, a solution is:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/
/*
  recursive.
*/
public class Solution {
    public void helper(int n, int start,int k, ArrayList<Integer> cur,ArrayList<ArrayList<Integer>> ret){
        if(cur.size()==k){
            ret.add(cur);
            return;
        }
        
        for(int i=start;i<=n;i++){
            ArrayList<Integer> newArr = new ArrayList<Integer>(cur);
            newArr.add(i);
            helper(n,i+1,k,newArr,ret);
        }
    }
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        helper(n,1,k,new ArrayList<Integer>(),ret);       
        return ret;
    }
}
