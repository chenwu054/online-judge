/**
 * @param {number} num
 * @return {number}
 */
var addDigits = function(num) {
    if(num === 0) {
        return 0;
    }
    if(num % 9 === 0) {
        return 9;
    }
    return num % 9;
};

/*
Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

For example:

Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.

Follow up:
Could you do it without any loop/recursion in O(1) runtime?

Hint:

A naive implementation of the above process is trivial. Could you come up with other methods?
What are all the possible results?
How do they occur, periodically or randomly?

Solution: it occurs periodically from 1 to 9. Special cases: 0 and num%9==0 -> output 9
*/
public class Solution {
    public int addDigits(int num) {
        if(num==0) return 0;
        return num%9==0?9:num%9;
    }
}
