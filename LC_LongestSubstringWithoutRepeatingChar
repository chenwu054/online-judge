class Solution:
    # @param s: a string
    # @return: an integer
    def lengthOfLongestSubstring(self, str):
        # write your code here
        if str==None:
            return 0
        if len(str)<2:
            return len(str)
        charSet=set([])
        s,e,maxLen=0,0,0
        while e<len(str):
            while e<len(str) and str[e] not in charSet:
                charSet.add(str[e])
                maxLen=max(maxLen,e-s+1)
                e+=1
            while e<len(str) and s<e:
                charSet.remove(str[s])
                s+=1
                if str[s-1]==str[e]:
                    break
        return maxLen
                
                
/*
  Given a string, find the length of the longest substring without repeating characters. 
  For example, the longest substring without repeating letters for "abcabcbb" is "abc", which the length is 3. For "bbbbb" the longest substring is "b", with the length of 1.
*/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(s==null||s.length()==0)
            return 0;
        int fast=0,slow=0;
        Map<Character,Integer> map = new HashMap<Character,Integer>();
        int maxLen=0,len=0;
        while(fast<s.length()){
            if(!map.containsKey(s.charAt(fast))){
                map.put(s.charAt(fast),fast);
                len=fast-slow+1;
                maxLen=Math.max(maxLen,len);
            }
            else{
                int index=map.get(s.charAt(fast));
                while(slow<=index){
                    map.remove(s.charAt(slow++));
                }
                map.put(s.charAt(fast),fast);
                //fast++;
            }
            fast++;
        }
        return maxLen;
    }
}
