/*
Given a list of non negative integers, arrange them such that they form the largest number.

For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.

Note: The result may be very large, so you need to return a string instead of an integer.
*/
//use string
public class Solution {
    class NumberComparator implements Comparator<String>{
        public int compare(String a, String b ){
            String ab = a+b;
            String ba = b+a;
            int res = ab.compareTo(ba);
            if(res==0)
                return 0;
            else{
                return res>0?-1:1;
            }
        }
    } 
    public String largestNumber(int[] num) {
        ArrayList<String> n = new ArrayList<String>();
        for(int i=0;i<num.length;i++){
            n.add(""+num[i]);
        }
        Collections.sort(n, new NumberComparator());
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<n.size();i++){
            sb.append(n.get(i));
        }
        int start = 0;
        while(start<sb.length() && sb.charAt(start)=='0'){
            start++;
        }
        return sb.substring(Math.min(sb.length()-1,start)).toString();
    }
}
// use long 
public class Solution {
    class NumberComparator implements Comparator<Long>{
        public int compare(Long a, Long b){
            if(a==0){
                return b==0?0:1;
            }
            else if(b==0)
                return -11;
                
            Long aTen = new Long((long)1);
            while(a/aTen>0){
                aTen*=10;
            }
            Long bTen = new Long((long)1);
            while(b/bTen>0){
                bTen*=10;
            }
            Long ab = a*bTen + b;
            Long ba = b*aTen + a;
            if(ba>ab)
                return 1;
            else if(ba<ab)
                return -1;
            else
                return 0;
        }
    } 
    public String largestNumber(int[] num) {
        ArrayList<Long> n = new ArrayList<Long>();
        for(int i=0;i<num.length;i++){
            n.add((long)num[i]);
        }
        Collections.sort(n, new NumberComparator());
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<n.size();i++){
            sb.append(n.get(i));
        }
        int start = 0;
        while(start<sb.length() && sb.charAt(start)=='0'){
            start++;
        }
        return sb.substring(Math.min(sb.length()-1,start)).toString();
    }
}
