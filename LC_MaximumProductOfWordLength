/*
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".

Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.
*/
public class Solution {
    public int maxProduct(String[] words) {
    	if(words == null || words.length < 2) {
    		return 0;
    	}        
    	int n = words.length;
    	int[] maps = new int[n];
    	for(int i = 0; i< n; i++) {
    		maps[i] = getBitMap(words[i]);
    	}
    	int maxLen = 0;
    	for(int i = 0; i < n - 1;i++) {
    		for(int j = i+1; j<n;j++) {
    			if((maps[i] & maps[j]) == 0) {
    			 	maxLen = Math.max(maxLen, words[i].length() * words[j].length());
    			}
    		}
    	}
    	return maxLen;
    }
    private int getBitMap(String word) {
    	int ret = 0;
    	for(int i = 0; i<word.length(); i++) {
    		char c = word.charAt(i);
    		ret |= 1 << (c-'a');
    	}
    	return ret;
    }
}
